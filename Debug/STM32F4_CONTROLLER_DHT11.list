
STM32F4_CONTROLLER_DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003388  08003388  00004388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003438  08003438  00005074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003438  08003438  00004438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003440  08003440  00005074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003440  08003440  00004440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003444  08003444  00004444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08003448  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005074  2**0
                  CONTENTS
 10 .bss          00000274  20000074  20000074  00005074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  00005074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000491a  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001373  00000000  00000000  000099be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000518  00000000  00000000  0000ad38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003a6  00000000  00000000  0000b250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020255  00000000  00000000  0000b5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006854  00000000  00000000  0002b84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0585  00000000  00000000  0003209f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f2624  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c90  00000000  00000000  000f2668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000f42f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003370 	.word	0x08003370

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003370 	.word	0x08003370

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <DWT_Init>:
uint8_t DHT11_ReadByte_Interval(void);
static DHT11_Handle_t dht11;
void GPIO_Output_Init();
void GPIO_Input_Init();

void DWT_Init(void) {
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;     // Bật DWT
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <DWT_Init+0x2c>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a08      	ldr	r2, [pc, #32]	@ (80005d8 <DWT_Init+0x2c>)
 80005b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ba:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;                                     // Reset bộ đếm
 80005bc:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <DWT_Init+0x30>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;                 // Enable bộ đếm
 80005c2:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <DWT_Init+0x30>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <DWT_Init+0x30>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000edf0 	.word	0xe000edf0
 80005dc:	e0001000 	.word	0xe0001000

080005e0 <delay_us>:
void delay_us(uint32_t us) {
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <delay_us+0x40>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	60fb      	str	r3, [r7, #12]
    // STM32F4 chạy 168MHz => 1 us = 168 cycles
    uint32_t delay_cycles = us * (SystemCoreClock / 1000000);
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <delay_us+0x44>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <delay_us+0x48>)
 80005f4:	fba2 2303 	umull	r2, r3, r2, r3
 80005f8:	0c9a      	lsrs	r2, r3, #18
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	fb02 f303 	mul.w	r3, r2, r3
 8000600:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - clk_cycle_start) < delay_cycles);
 8000602:	bf00      	nop
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <delay_us+0x40>)
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	429a      	cmp	r2, r3
 8000610:	d8f8      	bhi.n	8000604 <delay_us+0x24>
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e0001000 	.word	0xe0001000
 8000624:	20000004 	.word	0x20000004
 8000628:	431bde83 	.word	0x431bde83

0800062c <DHT11_Init>:

void DHT11_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	807b      	strh	r3, [r7, #2]
	dht11.GPIO_Pin = GPIO_Pin;
 8000638:	4a05      	ldr	r2, [pc, #20]	@ (8000650 <DHT11_Init+0x24>)
 800063a:	887b      	ldrh	r3, [r7, #2]
 800063c:	8093      	strh	r3, [r2, #4]
	dht11.GPIOx = GPIOx;
 800063e:	4a04      	ldr	r2, [pc, #16]	@ (8000650 <DHT11_Init+0x24>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6013      	str	r3, [r2, #0]
	DWT_Init();
 8000644:	f7ff ffb2 	bl	80005ac <DWT_Init>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000090 	.word	0x20000090

08000654 <DHT11_Start>:

void DHT11_Start(){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	GPIO_Output_Init();
 8000658:	f000 f8d6 	bl	8000808 <GPIO_Output_Init>
	HAL_GPIO_WritePin(dht11.GPIOx, dht11.GPIO_Pin, GPIO_PIN_SET);
 800065c:	4b21      	ldr	r3, [pc, #132]	@ (80006e4 <DHT11_Start+0x90>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a20      	ldr	r2, [pc, #128]	@ (80006e4 <DHT11_Start+0x90>)
 8000662:	8891      	ldrh	r1, [r2, #4]
 8000664:	2201      	movs	r2, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f001 f922 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dht11.GPIOx, dht11.GPIO_Pin, GPIO_PIN_RESET);
 800066c:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <DHT11_Start+0x90>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1c      	ldr	r2, [pc, #112]	@ (80006e4 <DHT11_Start+0x90>)
 8000672:	8891      	ldrh	r1, [r2, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f91a 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fe2d 	bl	80012dc <HAL_Delay>
	HAL_GPIO_WritePin(dht11.GPIOx, dht11.GPIO_Pin, GPIO_PIN_SET);
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <DHT11_Start+0x90>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <DHT11_Start+0x90>)
 8000688:	8891      	ldrh	r1, [r2, #4]
 800068a:	2201      	movs	r2, #1
 800068c:	4618      	mov	r0, r3
 800068e:	f001 f90f 	bl	80018b0 <HAL_GPIO_WritePin>
	GPIO_Input_Init();
 8000692:	f000 f935 	bl	8000900 <GPIO_Input_Init>
	while(HAL_GPIO_ReadPin(dht11.GPIOx, dht11.GPIO_Pin));
 8000696:	bf00      	nop
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <DHT11_Start+0x90>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a11      	ldr	r2, [pc, #68]	@ (80006e4 <DHT11_Start+0x90>)
 800069e:	8892      	ldrh	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f8ec 	bl	8001880 <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1f4      	bne.n	8000698 <DHT11_Start+0x44>
	while(!HAL_GPIO_ReadPin(dht11.GPIOx, dht11.GPIO_Pin));
 80006ae:	bf00      	nop
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <DHT11_Start+0x90>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0b      	ldr	r2, [pc, #44]	@ (80006e4 <DHT11_Start+0x90>)
 80006b6:	8892      	ldrh	r2, [r2, #4]
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f8e0 	bl	8001880 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0f4      	beq.n	80006b0 <DHT11_Start+0x5c>
	while(HAL_GPIO_ReadPin(dht11.GPIOx, dht11.GPIO_Pin));
 80006c6:	bf00      	nop
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <DHT11_Start+0x90>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <DHT11_Start+0x90>)
 80006ce:	8892      	ldrh	r2, [r2, #4]
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f8d4 	bl	8001880 <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f4      	bne.n	80006c8 <DHT11_Start+0x74>
}
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000090 	.word	0x20000090

080006e8 <DHT11_ReadBit>:

uint8_t DHT11_ReadBit(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	71fb      	strb	r3, [r7, #7]
	while(!HAL_GPIO_ReadPin(dht11.GPIOx, dht11.GPIO_Pin));
 80006f2:	bf00      	nop
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <DHT11_ReadBit+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a14      	ldr	r2, [pc, #80]	@ (800074c <DHT11_ReadBit+0x64>)
 80006fa:	8892      	ldrh	r2, [r2, #4]
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f8be 	bl	8001880 <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0f4      	beq.n	80006f4 <DHT11_ReadBit+0xc>
	delay_us(50);
 800070a:	2032      	movs	r0, #50	@ 0x32
 800070c:	f7ff ff68 	bl	80005e0 <delay_us>
	if(HAL_GPIO_ReadPin(dht11.GPIOx, dht11.GPIO_Pin)){
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <DHT11_ReadBit+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0d      	ldr	r2, [pc, #52]	@ (800074c <DHT11_ReadBit+0x64>)
 8000716:	8892      	ldrh	r2, [r2, #4]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f001 f8b0 	bl	8001880 <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <DHT11_ReadBit+0x42>
		result = 1;
 8000726:	2301      	movs	r3, #1
 8000728:	71fb      	strb	r3, [r7, #7]
	}
	while(HAL_GPIO_ReadPin(dht11.GPIOx, dht11.GPIO_Pin)){
 800072a:	bf00      	nop
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <DHT11_ReadBit+0x64>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a06      	ldr	r2, [pc, #24]	@ (800074c <DHT11_ReadBit+0x64>)
 8000732:	8892      	ldrh	r2, [r2, #4]
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f8a2 	bl	8001880 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f4      	bne.n	800072c <DHT11_ReadBit+0x44>
    	// đợi cho high kết thúc
    }
	return result;
 8000742:	79fb      	ldrb	r3, [r7, #7]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000090 	.word	0x20000090

08000750 <DHT11_ReadData>:

uint8_t DHT11_ReadData(DHT11_Data_t* data){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	DHT11_Start();
 8000758:	f7ff ff7c 	bl	8000654 <DHT11_Start>
	data->i_humi = DHT11_ReadByte_Interval();
 800075c:	f000 f836 	bl	80007cc <DHT11_ReadByte_Interval>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	701a      	strb	r2, [r3, #0]
	data->f_humi = DHT11_ReadByte_Interval();
 8000768:	f000 f830 	bl	80007cc <DHT11_ReadByte_Interval>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	705a      	strb	r2, [r3, #1]
	data->i_temp = DHT11_ReadByte_Interval();
 8000774:	f000 f82a 	bl	80007cc <DHT11_ReadByte_Interval>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	709a      	strb	r2, [r3, #2]
	data->f_temp = DHT11_ReadByte_Interval();
 8000780:	f000 f824 	bl	80007cc <DHT11_ReadByte_Interval>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	70da      	strb	r2, [r3, #3]
	data->checksum = DHT11_ReadByte_Interval();
 800078c:	f000 f81e 	bl	80007cc <DHT11_ReadByte_Interval>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	711a      	strb	r2, [r3, #4]
	//check sum but optional
	uint8_t sum = data->i_humi + data->f_humi + data->i_temp + data->f_temp;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	781a      	ldrb	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	785b      	ldrb	r3, [r3, #1]
 80007a0:	4413      	add	r3, r2
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	789b      	ldrb	r3, [r3, #2]
 80007a8:	4413      	add	r3, r2
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	78db      	ldrb	r3, [r3, #3]
 80007b0:	4413      	add	r3, r2
 80007b2:	73fb      	strb	r3, [r7, #15]
	if (sum == data->checksum){
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	7bfa      	ldrb	r2, [r7, #15]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d101      	bne.n	80007c2 <DHT11_ReadData+0x72>
		return 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	e000      	b.n	80007c4 <DHT11_ReadData+0x74>
	} else {
		return 0;
 80007c2:	2300      	movs	r3, #0
	}
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <DHT11_ReadByte_Interval>:

uint8_t DHT11_ReadByte_Interval(void){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 8;i++){
 80007d6:	2300      	movs	r3, #0
 80007d8:	71bb      	strb	r3, [r7, #6]
 80007da:	e00c      	b.n	80007f6 <DHT11_ReadByte_Interval+0x2a>
		value <<= 1;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	71fb      	strb	r3, [r7, #7]
		value |= DHT11_ReadBit();
 80007e2:	f7ff ff81 	bl	80006e8 <DHT11_ReadBit>
 80007e6:	4603      	mov	r3, r0
 80007e8:	461a      	mov	r2, r3
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 8;i++){
 80007f0:	79bb      	ldrb	r3, [r7, #6]
 80007f2:	3301      	adds	r3, #1
 80007f4:	71bb      	strb	r3, [r7, #6]
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	2b07      	cmp	r3, #7
 80007fa:	d9ef      	bls.n	80007dc <DHT11_ReadByte_Interval+0x10>
	}
	return value;
 80007fc:	79fb      	ldrb	r3, [r7, #7]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <GPIO_Output_Init>:

void GPIO_Output_Init()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	@ 0x28
 800080c:	af00      	add	r7, sp, #0
	if (dht11.GPIOx == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b36      	ldr	r3, [pc, #216]	@ (80008e8 <GPIO_Output_Init+0xe0>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a36      	ldr	r2, [pc, #216]	@ (80008ec <GPIO_Output_Init+0xe4>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d10e      	bne.n	8000836 <GPIO_Output_Init+0x2e>
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	4b34      	ldr	r3, [pc, #208]	@ (80008f0 <GPIO_Output_Init+0xe8>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000820:	4a33      	ldr	r2, [pc, #204]	@ (80008f0 <GPIO_Output_Init+0xe8>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6313      	str	r3, [r2, #48]	@ 0x30
 8000828:	4b31      	ldr	r3, [pc, #196]	@ (80008f0 <GPIO_Output_Init+0xe8>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	e03a      	b.n	80008ac <GPIO_Output_Init+0xa4>
	else if (dht11.GPIOx == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b2c      	ldr	r3, [pc, #176]	@ (80008e8 <GPIO_Output_Init+0xe0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a2e      	ldr	r2, [pc, #184]	@ (80008f4 <GPIO_Output_Init+0xec>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d10e      	bne.n	800085e <GPIO_Output_Init+0x56>
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	4b2a      	ldr	r3, [pc, #168]	@ (80008f0 <GPIO_Output_Init+0xe8>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000848:	4a29      	ldr	r2, [pc, #164]	@ (80008f0 <GPIO_Output_Init+0xe8>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <GPIO_Output_Init+0xe8>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000854:	f003 0302 	and.w	r3, r3, #2
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	e026      	b.n	80008ac <GPIO_Output_Init+0xa4>
	else if (dht11.GPIOx == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <GPIO_Output_Init+0xe0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a25      	ldr	r2, [pc, #148]	@ (80008f8 <GPIO_Output_Init+0xf0>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d10e      	bne.n	8000886 <GPIO_Output_Init+0x7e>
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b20      	ldr	r3, [pc, #128]	@ (80008f0 <GPIO_Output_Init+0xe8>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000870:	4a1f      	ldr	r2, [pc, #124]	@ (80008f0 <GPIO_Output_Init+0xe8>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6313      	str	r3, [r2, #48]	@ 0x30
 8000878:	4b1d      	ldr	r3, [pc, #116]	@ (80008f0 <GPIO_Output_Init+0xe8>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	e012      	b.n	80008ac <GPIO_Output_Init+0xa4>
	else if (dht11.GPIOx == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <GPIO_Output_Init+0xe0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <GPIO_Output_Init+0xf4>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d10d      	bne.n	80008ac <GPIO_Output_Init+0xa4>
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <GPIO_Output_Init+0xe8>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000898:	4a15      	ldr	r2, [pc, #84]	@ (80008f0 <GPIO_Output_Init+0xe8>)
 800089a:	f043 0308 	orr.w	r3, r3, #8
 800089e:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a0:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <GPIO_Output_Init+0xe8>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a4:	f003 0308 	and.w	r3, r3, #8
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = dht11.GPIO_Pin;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <GPIO_Output_Init+0xe0>)
 80008be:	889b      	ldrh	r3, [r3, #4]
 80008c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(dht11.GPIOx, &GPIO_InitStruct);
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <GPIO_Output_Init+0xe0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f107 0214 	add.w	r2, r7, #20
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fe35 	bl	8001548 <HAL_GPIO_Init>
}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	@ 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000090 	.word	0x20000090
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020c00 	.word	0x40020c00

08000900 <GPIO_Input_Init>:

void GPIO_Input_Init()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = dht11.GPIO_Pin;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <GPIO_Input_Init+0x3c>)
 8000916:	889b      	ldrh	r3, [r3, #4]
 8000918:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dht11.GPIOx, &GPIO_InitStruct);
 8000926:	4b05      	ldr	r3, [pc, #20]	@ (800093c <GPIO_Input_Init+0x3c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	1d3a      	adds	r2, r7, #4
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fe0a 	bl	8001548 <HAL_GPIO_Init>
}
 8000934:	bf00      	nop
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000090 	.word	0x20000090

08000940 <LCD_Clear>:
 * D6 => D7
 * D7 => D0
 * EN => D4
 */

void LCD_Clear(void){
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	LCD_Send_CMD(LCD_CMD_DISPLAY_CLEAR); //0x00000001
 8000944:	2001      	movs	r0, #1
 8000946:	f000 f8c5 	bl	8000ad4 <LCD_Send_CMD>
	delay_us(2000);
 800094a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800094e:	f7ff fe47 	bl	80005e0 <delay_us>
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <LCD_Init>:
void LCD_Init(){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	GPIO_LCD_Init();
 800095c:	f000 f852 	bl	8000a04 <GPIO_LCD_Init>

	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2104      	movs	r1, #4
 8000964:	4826      	ldr	r0, [pc, #152]	@ (8000a00 <LCD_Init+0xa8>)
 8000966:	f000 ffa3 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2108      	movs	r1, #8
 800096e:	4824      	ldr	r0, [pc, #144]	@ (8000a00 <LCD_Init+0xa8>)
 8000970:	f000 ff9e 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2120      	movs	r1, #32
 8000978:	4821      	ldr	r0, [pc, #132]	@ (8000a00 <LCD_Init+0xa8>)
 800097a:	f000 ff99 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2140      	movs	r1, #64	@ 0x40
 8000982:	481f      	ldr	r0, [pc, #124]	@ (8000a00 <LCD_Init+0xa8>)
 8000984:	f000 ff94 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2180      	movs	r1, #128	@ 0x80
 800098c:	481c      	ldr	r0, [pc, #112]	@ (8000a00 <LCD_Init+0xa8>)
 800098e:	f000 ff8f 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2101      	movs	r1, #1
 8000996:	481a      	ldr	r0, [pc, #104]	@ (8000a00 <LCD_Init+0xa8>)
 8000998:	f000 ff8a 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2110      	movs	r1, #16
 80009a0:	4817      	ldr	r0, [pc, #92]	@ (8000a00 <LCD_Init+0xa8>)
 80009a2:	f000 ff85 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 80009a6:	2028      	movs	r0, #40	@ 0x28
 80009a8:	f000 fc98 	bl	80012dc <HAL_Delay>

	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2104      	movs	r1, #4
 80009b0:	4813      	ldr	r0, [pc, #76]	@ (8000a00 <LCD_Init+0xa8>)
 80009b2:	f000 ff7d 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2108      	movs	r1, #8
 80009ba:	4811      	ldr	r0, [pc, #68]	@ (8000a00 <LCD_Init+0xa8>)
 80009bc:	f000 ff78 	bl	80018b0 <HAL_GPIO_WritePin>
	LCD_Send_Nibble(0x3);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f84f 	bl	8000a64 <LCD_Send_Nibble>

	HAL_Delay(5);
 80009c6:	2005      	movs	r0, #5
 80009c8:	f000 fc88 	bl	80012dc <HAL_Delay>

	LCD_Send_Nibble(0x3);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f849 	bl	8000a64 <LCD_Send_Nibble>

	delay_us(150);
 80009d2:	2096      	movs	r0, #150	@ 0x96
 80009d4:	f7ff fe04 	bl	80005e0 <delay_us>

	LCD_Send_Nibble(0x3);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f843 	bl	8000a64 <LCD_Send_Nibble>

	LCD_Send_Nibble(LCD_RETURN_HOME);
 80009de:	2002      	movs	r0, #2
 80009e0:	f000 f840 	bl	8000a64 <LCD_Send_Nibble>

	//set to 4 bit
	LCD_Send_CMD(LCD_CMD_4_BIT_2_LINE_5X8); //0x00101000
 80009e4:	2028      	movs	r0, #40	@ 0x28
 80009e6:	f000 f875 	bl	8000ad4 <LCD_Send_CMD>

	//	Display on and cursor on
	LCD_Send_CMD(LCD_CMD_DISPLAY_ON_CURSOR_ON); // 0x00001000
 80009ea:	200e      	movs	r0, #14
 80009ec:	f000 f872 	bl	8000ad4 <LCD_Send_CMD>


	// clear Display
	LCD_Clear();
 80009f0:	f7ff ffa6 	bl	8000940 <LCD_Clear>
	// Entry mode set
	LCD_Send_CMD(LCD_CMD_INCADD); //0x00000110
 80009f4:	2006      	movs	r0, #6
 80009f6:	f000 f86d 	bl	8000ad4 <LCD_Send_CMD>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40020c00 	.word	0x40020c00

08000a04 <GPIO_LCD_Init>:


void GPIO_LCD_Init(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	@ 0x28
 8000a08:	af00      	add	r7, sp, #0
	if (LCD_GPIO_PORT == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE();
	else if (LCD_GPIO_PORT == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE();
	else if (LCD_GPIO_PORT == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE();
	else if (LCD_GPIO_PORT == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <GPIO_LCD_Init+0x58>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a12      	ldr	r2, [pc, #72]	@ (8000a5c <GPIO_LCD_Init+0x58>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <GPIO_LCD_Init+0x58>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = LCD_GPIO_RS| LCD_GPIO_RW | LCD_GPIO_D4 | LCD_GPIO_D5 | LCD_GPIO_D6 | LCD_GPIO_D7 | LCD_GPIO_EN;
 8000a36:	23fd      	movs	r3, #253	@ 0xfd
 8000a38:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <GPIO_LCD_Init+0x5c>)
 8000a4e:	f000 fd7b 	bl	8001548 <HAL_GPIO_Init>
}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <LCD_Send_Nibble>:

void LCD_Send_Nibble(uint8_t nibble){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D4, ((nibble >> 0) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	2120      	movs	r1, #32
 8000a7a:	4815      	ldr	r0, [pc, #84]	@ (8000ad0 <LCD_Send_Nibble+0x6c>)
 8000a7c:	f000 ff18 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D5, ((nibble >> 1) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	085b      	lsrs	r3, r3, #1
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	2140      	movs	r1, #64	@ 0x40
 8000a90:	480f      	ldr	r0, [pc, #60]	@ (8000ad0 <LCD_Send_Nibble+0x6c>)
 8000a92:	f000 ff0d 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D6, ((nibble >> 2) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	089b      	lsrs	r3, r3, #2
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2180      	movs	r1, #128	@ 0x80
 8000aa6:	480a      	ldr	r0, [pc, #40]	@ (8000ad0 <LCD_Send_Nibble+0x6c>)
 8000aa8:	f000 ff02 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D7, ((nibble >> 3) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	08db      	lsrs	r3, r3, #3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	2101      	movs	r1, #1
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <LCD_Send_Nibble+0x6c>)
 8000abe:	f000 fef7 	bl	80018b0 <HAL_GPIO_WritePin>
	// enable pin
	LCD_Enable();
 8000ac2:	f000 f861 	bl	8000b88 <LCD_Enable>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40020c00 	.word	0x40020c00

08000ad4 <LCD_Send_CMD>:
void LCD_Send_CMD(uint8_t cmd){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
    // RS = 0 (command), RW = 0 (write)
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2104      	movs	r1, #4
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <LCD_Send_CMD+0x40>)
 8000ae4:	f000 fee4 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2108      	movs	r1, #8
 8000aec:	4809      	ldr	r0, [pc, #36]	@ (8000b14 <LCD_Send_CMD+0x40>)
 8000aee:	f000 fedf 	bl	80018b0 <HAL_GPIO_WritePin>

	LCD_Send_Nibble((cmd >> 4) & 0x0F);
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	091b      	lsrs	r3, r3, #4
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ffb3 	bl	8000a64 <LCD_Send_Nibble>
	LCD_Send_Nibble(cmd & 0x0F);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 030f 	and.w	r3, r3, #15
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ffac 	bl	8000a64 <LCD_Send_Nibble>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40020c00 	.word	0x40020c00

08000b18 <LCD_Send_Data>:

void LCD_Send_Data(uint8_t data){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
	 // RS = 1 (data), RW = 0 (write)
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2104      	movs	r1, #4
 8000b26:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <LCD_Send_Data+0x40>)
 8000b28:	f000 fec2 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2108      	movs	r1, #8
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <LCD_Send_Data+0x40>)
 8000b32:	f000 febd 	bl	80018b0 <HAL_GPIO_WritePin>
	LCD_Send_Nibble((data >> 4) & 0x0F);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	091b      	lsrs	r3, r3, #4
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff91 	bl	8000a64 <LCD_Send_Nibble>
	LCD_Send_Nibble(data & 0x0F);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 030f 	and.w	r3, r3, #15
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff8a 	bl	8000a64 <LCD_Send_Nibble>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40020c00 	.word	0x40020c00

08000b5c <LCD_Send_String>:

void LCD_Send_String(uint8_t *str){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	while(*str != '\0'){
 8000b64:	e007      	b.n	8000b76 <LCD_Send_String+0x1a>
		LCD_Send_Data(*str);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ffd4 	bl	8000b18 <LCD_Send_Data>
		str++;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3301      	adds	r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
	while(*str != '\0'){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f3      	bne.n	8000b66 <LCD_Send_String+0xa>
	}
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <LCD_Enable>:

void LCD_Enable(void){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <LCD_Enable+0x28>)
 8000b92:	f000 fe8d 	bl	80018b0 <HAL_GPIO_WritePin>
	delay_us(1);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff fd22 	bl	80005e0 <delay_us>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <LCD_Enable+0x28>)
 8000ba2:	f000 fe85 	bl	80018b0 <HAL_GPIO_WritePin>
	delay_us(50);
 8000ba6:	2032      	movs	r0, #50	@ 0x32
 8000ba8:	f7ff fd1a 	bl	80005e0 <delay_us>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40020c00 	.word	0x40020c00

08000bb4 <GPIO_BTN_IT>:
}DHT11_DataConfig_t;
DHT11_DataConfig_t dataConfig;
DHT11_Data_t dht11_data;
char msg[32];
char msg1[32];
void GPIO_BTN_IT(void){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <GPIO_BTN_IT+0x78>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c2c <GPIO_BTN_IT+0x78>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <GPIO_BTN_IT+0x78>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8000be4:	2338      	movs	r3, #56	@ 0x38
 8000be6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <GPIO_BTN_IT+0x7c>)
 8000bfc:	f000 fca4 	bl	8001548 <HAL_GPIO_Init>

	//GPIO LED
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c00:	2340      	movs	r3, #64	@ 0x40
 8000c02:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4619      	mov	r1, r3
 8000c14:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <GPIO_BTN_IT+0x7c>)
 8000c16:	f000 fc97 	bl	8001548 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2140      	movs	r1, #64	@ 0x40
 8000c1e:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <GPIO_BTN_IT+0x7c>)
 8000c20:	f000 fe46 	bl	80018b0 <HAL_GPIO_WritePin>
}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020400 	.word	0x40020400

08000c34 <GPIO_Alert>:

void GPIO_Alert(){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	if(CURRENT_MODE == MODE_SHOWDATA){
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <GPIO_Alert+0x40>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d116      	bne.n	8000c6e <GPIO_Alert+0x3a>
		if(dht11_data.i_humi > dataConfig.i_humi_config
 8000c40:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <GPIO_Alert+0x44>)
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <GPIO_Alert+0x48>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d805      	bhi.n	8000c58 <GPIO_Alert+0x24>
				|| dht11_data.i_temp > dataConfig.i_temp_config){
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <GPIO_Alert+0x44>)
 8000c4e:	789a      	ldrb	r2, [r3, #2]
 8000c50:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <GPIO_Alert+0x48>)
 8000c52:	785b      	ldrb	r3, [r3, #1]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d905      	bls.n	8000c64 <GPIO_Alert+0x30>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2140      	movs	r1, #64	@ 0x40
 8000c5c:	4808      	ldr	r0, [pc, #32]	@ (8000c80 <GPIO_Alert+0x4c>)
 8000c5e:	f000 fe27 	bl	80018b0 <HAL_GPIO_WritePin>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
		}
	}

}
 8000c62:	e004      	b.n	8000c6e <GPIO_Alert+0x3a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2140      	movs	r1, #64	@ 0x40
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <GPIO_Alert+0x4c>)
 8000c6a:	f000 fe21 	bl	80018b0 <HAL_GPIO_WritePin>
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000098 	.word	0x20000098
 8000c78:	200000a0 	.word	0x200000a0
 8000c7c:	2000009c 	.word	0x2000009c
 8000c80:	40020400 	.word	0x40020400

08000c84 <LCD_Display_Config>:

void LCD_Display_Config(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	LCD_Clear();
 8000c88:	f7ff fe5a 	bl	8000940 <LCD_Clear>
	sprintf(msg1, "Temp on Led %d'C", dataConfig.i_temp_config);
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <LCD_Display_Config+0x60>)
 8000c8e:	785b      	ldrb	r3, [r3, #1]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4915      	ldr	r1, [pc, #84]	@ (8000ce8 <LCD_Display_Config+0x64>)
 8000c94:	4815      	ldr	r0, [pc, #84]	@ (8000cec <LCD_Display_Config+0x68>)
 8000c96:	f001 fb23 	bl	80022e0 <siprintf>
	LCD_Send_CMD(0x80); // Dòng 1
 8000c9a:	2080      	movs	r0, #128	@ 0x80
 8000c9c:	f7ff ff1a 	bl	8000ad4 <LCD_Send_CMD>
	LCD_Send_String((uint8_t*)msg1);
 8000ca0:	4812      	ldr	r0, [pc, #72]	@ (8000cec <LCD_Display_Config+0x68>)
 8000ca2:	f7ff ff5b 	bl	8000b5c <LCD_Send_String>
	sprintf(msg1, "Humi on Led %d%c", dataConfig.i_humi_config, '%');
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <LCD_Display_Config+0x60>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	2325      	movs	r3, #37	@ 0x25
 8000cae:	4910      	ldr	r1, [pc, #64]	@ (8000cf0 <LCD_Display_Config+0x6c>)
 8000cb0:	480e      	ldr	r0, [pc, #56]	@ (8000cec <LCD_Display_Config+0x68>)
 8000cb2:	f001 fb15 	bl	80022e0 <siprintf>
	LCD_Send_CMD(0xC0); // Dòng 2
 8000cb6:	20c0      	movs	r0, #192	@ 0xc0
 8000cb8:	f7ff ff0c 	bl	8000ad4 <LCD_Send_CMD>
	LCD_Send_String((uint8_t*)msg1);
 8000cbc:	480b      	ldr	r0, [pc, #44]	@ (8000cec <LCD_Display_Config+0x68>)
 8000cbe:	f7ff ff4d 	bl	8000b5c <LCD_Send_String>
	if(CURRENT_MODE == MODE_CONFIG_TEMP){
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <LCD_Display_Config+0x70>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d103      	bne.n	8000cd2 <LCD_Display_Config+0x4e>
		LCD_Send_CMD(0x8C);
 8000cca:	208c      	movs	r0, #140	@ 0x8c
 8000ccc:	f7ff ff02 	bl	8000ad4 <LCD_Send_CMD>
	}else if(CURRENT_MODE == MODE_CONFIG_HUMI){
		LCD_Send_CMD(0xCC);
	}

}
 8000cd0:	e006      	b.n	8000ce0 <LCD_Display_Config+0x5c>
	}else if(CURRENT_MODE == MODE_CONFIG_HUMI){
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <LCD_Display_Config+0x70>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d102      	bne.n	8000ce0 <LCD_Display_Config+0x5c>
		LCD_Send_CMD(0xCC);
 8000cda:	20cc      	movs	r0, #204	@ 0xcc
 8000cdc:	f7ff fefa 	bl	8000ad4 <LCD_Send_CMD>
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000009c 	.word	0x2000009c
 8000ce8:	08003388 	.word	0x08003388
 8000cec:	200000c8 	.word	0x200000c8
 8000cf0:	0800339c 	.word	0x0800339c
 8000cf4:	20000098 	.word	0x20000098

08000cf8 <LCD_Display_Data>:

void LCD_Display_Data(void){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	GPIO_Alert();
 8000cfc:	f7ff ff9a 	bl	8000c34 <GPIO_Alert>
	LCD_Clear();
 8000d00:	f7ff fe1e 	bl	8000940 <LCD_Clear>
	sprintf(msg, "Temp: %d'C", dht11_data.i_temp);
 8000d04:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <LCD_Display_Data+0x48>)
 8000d06:	789b      	ldrb	r3, [r3, #2]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	490e      	ldr	r1, [pc, #56]	@ (8000d44 <LCD_Display_Data+0x4c>)
 8000d0c:	480e      	ldr	r0, [pc, #56]	@ (8000d48 <LCD_Display_Data+0x50>)
 8000d0e:	f001 fae7 	bl	80022e0 <siprintf>
	LCD_Send_CMD(0x80); // Dòng 1
 8000d12:	2080      	movs	r0, #128	@ 0x80
 8000d14:	f7ff fede 	bl	8000ad4 <LCD_Send_CMD>
	LCD_Send_String((uint8_t*)msg);
 8000d18:	480b      	ldr	r0, [pc, #44]	@ (8000d48 <LCD_Display_Data+0x50>)
 8000d1a:	f7ff ff1f 	bl	8000b5c <LCD_Send_String>
	sprintf(msg, "Humi: %d%c", dht11_data.i_humi, '%');
 8000d1e:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <LCD_Display_Data+0x48>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	2325      	movs	r3, #37	@ 0x25
 8000d26:	4909      	ldr	r1, [pc, #36]	@ (8000d4c <LCD_Display_Data+0x54>)
 8000d28:	4807      	ldr	r0, [pc, #28]	@ (8000d48 <LCD_Display_Data+0x50>)
 8000d2a:	f001 fad9 	bl	80022e0 <siprintf>
	LCD_Send_CMD(0xC0); // Dòng 2
 8000d2e:	20c0      	movs	r0, #192	@ 0xc0
 8000d30:	f7ff fed0 	bl	8000ad4 <LCD_Send_CMD>
	LCD_Send_String((uint8_t*)msg);
 8000d34:	4804      	ldr	r0, [pc, #16]	@ (8000d48 <LCD_Display_Data+0x50>)
 8000d36:	f7ff ff11 	bl	8000b5c <LCD_Send_String>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000a0 	.word	0x200000a0
 8000d44:	080033b0 	.word	0x080033b0
 8000d48:	200000a8 	.word	0x200000a8
 8000d4c:	080033bc 	.word	0x080033bc

08000d50 <main>:

extern void initialise_monitor_handles(void);
static Mode_t last_mode = -1;
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000d54:	f002 faac 	bl	80032b0 <initialise_monitor_handles>
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d58:	f000 fa4e 	bl	80011f8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f91e 	bl	8000f9c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  GPIO_BTN_IT();
 8000d60:	f7ff ff28 	bl	8000bb4 <GPIO_BTN_IT>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2009      	movs	r0, #9
 8000d6a:	f000 fbb6 	bl	80014da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d6e:	2009      	movs	r0, #9
 8000d70:	f000 fbcf 	bl	8001512 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	200a      	movs	r0, #10
 8000d7a:	f000 fbae 	bl	80014da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f000 fbc7 	bl	8001512 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	2017      	movs	r0, #23
 8000d8a:	f000 fba6 	bl	80014da <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d8e:	2017      	movs	r0, #23
 8000d90:	f000 fbbf 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  DHT11_Init(GPIOD, GPIO_PIN_1);
 8000d94:	2102      	movs	r1, #2
 8000d96:	4828      	ldr	r0, [pc, #160]	@ (8000e38 <main+0xe8>)
 8000d98:	f7ff fc48 	bl	800062c <DHT11_Init>
  LCD_Init();
 8000d9c:	f7ff fddc 	bl	8000958 <LCD_Init>

  while (1)
  {
	if(last_mode != CURRENT_MODE || CURRENT_MODE == MODE_SHOWDATA){
 8000da0:	4b26      	ldr	r3, [pc, #152]	@ (8000e3c <main+0xec>)
 8000da2:	781a      	ldrb	r2, [r3, #0]
 8000da4:	4b26      	ldr	r3, [pc, #152]	@ (8000e40 <main+0xf0>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d103      	bne.n	8000db4 <main+0x64>
 8000dac:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <main+0xf0>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f5      	bne.n	8000da0 <main+0x50>
		last_mode = CURRENT_MODE;
 8000db4:	4b22      	ldr	r3, [pc, #136]	@ (8000e40 <main+0xf0>)
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	4b20      	ldr	r3, [pc, #128]	@ (8000e3c <main+0xec>)
 8000dba:	701a      	strb	r2, [r3, #0]
		if(CURRENT_MODE == MODE_SHOWDATA){
 8000dbc:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <main+0xf0>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d12d      	bne.n	8000e20 <main+0xd0>
			if(DHT11_ReadData(&dht11_data)){
 8000dc4:	481f      	ldr	r0, [pc, #124]	@ (8000e44 <main+0xf4>)
 8000dc6:	f7ff fcc3 	bl	8000750 <DHT11_ReadData>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d01a      	beq.n	8000e06 <main+0xb6>
				if(dataConfig.i_humi_config == 0 && dataConfig.i_temp_config == 0){
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <main+0xf8>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10f      	bne.n	8000df8 <main+0xa8>
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <main+0xf8>)
 8000dda:	785b      	ldrb	r3, [r3, #1]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10b      	bne.n	8000df8 <main+0xa8>
					dataConfig.i_humi_config = dht11_data.i_humi + 2;
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <main+0xf4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	3302      	adds	r3, #2
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <main+0xf8>)
 8000dea:	701a      	strb	r2, [r3, #0]
					dataConfig.i_temp_config = dht11_data.i_temp + 2;
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <main+0xf4>)
 8000dee:	789b      	ldrb	r3, [r3, #2]
 8000df0:	3302      	adds	r3, #2
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <main+0xf8>)
 8000df6:	705a      	strb	r2, [r3, #1]
				}
				LCD_Display_Data();
 8000df8:	f7ff ff7e 	bl	8000cf8 <LCD_Display_Data>
				HAL_Delay(1000);
 8000dfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e00:	f000 fa6c 	bl	80012dc <HAL_Delay>
 8000e04:	e7cc      	b.n	8000da0 <main+0x50>
			}else{
				sprintf(msg, "Sensor Error");
 8000e06:	4911      	ldr	r1, [pc, #68]	@ (8000e4c <main+0xfc>)
 8000e08:	4811      	ldr	r0, [pc, #68]	@ (8000e50 <main+0x100>)
 8000e0a:	f001 fa69 	bl	80022e0 <siprintf>
				LCD_Clear();
 8000e0e:	f7ff fd97 	bl	8000940 <LCD_Clear>
				LCD_Send_CMD(0x80);
 8000e12:	2080      	movs	r0, #128	@ 0x80
 8000e14:	f7ff fe5e 	bl	8000ad4 <LCD_Send_CMD>
				LCD_Send_String((uint8_t*)msg);
 8000e18:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <main+0x100>)
 8000e1a:	f7ff fe9f 	bl	8000b5c <LCD_Send_String>
				continue;
 8000e1e:	e009      	b.n	8000e34 <main+0xe4>
			}
		}else if(CURRENT_MODE == MODE_CONFIG_TEMP || CURRENT_MODE == MODE_CONFIG_HUMI){
 8000e20:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <main+0xf0>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d003      	beq.n	8000e30 <main+0xe0>
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <main+0xf0>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d1b7      	bne.n	8000da0 <main+0x50>
			LCD_Display_Config();
 8000e30:	f7ff ff28 	bl	8000c84 <LCD_Display_Config>
	if(last_mode != CURRENT_MODE || CURRENT_MODE == MODE_SHOWDATA){
 8000e34:	e7b4      	b.n	8000da0 <main+0x50>
 8000e36:	bf00      	nop
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000098 	.word	0x20000098
 8000e44:	200000a0 	.word	0x200000a0
 8000e48:	2000009c 	.word	0x2000009c
 8000e4c:	080033c8 	.word	0x080033c8
 8000e50:	200000a8 	.word	0x200000a8

08000e54 <EXTI3_IRQHandler>:
}




void EXTI3_IRQHandler(void){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000e58:	2008      	movs	r0, #8
 8000e5a:	f000 fd43 	bl	80018e4 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000e66:	2010      	movs	r0, #16
 8000e68:	f000 fd3c 	bl	80018e4 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e74:	2020      	movs	r0, #32
 8000e76:	f000 fd35 	bl	80018e4 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3){
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d128      	bne.n	8000ee2 <HAL_GPIO_EXTI_Callback+0x62>
		delay_us(20000);
 8000e90:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000e94:	f7ff fba4 	bl	80005e0 <delay_us>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET){
 8000e98:	2108      	movs	r1, #8
 8000e9a:	483d      	ldr	r0, [pc, #244]	@ (8000f90 <HAL_GPIO_EXTI_Callback+0x110>)
 8000e9c:	f000 fcf0 	bl	8001880 <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d16f      	bne.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
			if(CURRENT_MODE == MODE_SHOWDATA){
 8000ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x114>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d105      	bne.n	8000eba <HAL_GPIO_EXTI_Callback+0x3a>
				CURRENT_MODE = MODE_CONFIG_TEMP;
 8000eae:	4b39      	ldr	r3, [pc, #228]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x114>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]
				LCD_Display_Config();
 8000eb4:	f7ff fee6 	bl	8000c84 <LCD_Display_Config>
		}else if(CURRENT_MODE == MODE_CONFIG_HUMI && dataConfig.i_humi_config > 0){
			dataConfig.i_humi_config--;
			LCD_Display_Config();
		}
	}
}
 8000eb8:	e065      	b.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
			}else if(CURRENT_MODE == MODE_CONFIG_TEMP){
 8000eba:	4b36      	ldr	r3, [pc, #216]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x114>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d105      	bne.n	8000ece <HAL_GPIO_EXTI_Callback+0x4e>
				CURRENT_MODE = MODE_CONFIG_HUMI;
 8000ec2:	4b34      	ldr	r3, [pc, #208]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x114>)
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	701a      	strb	r2, [r3, #0]
				LCD_Display_Config();
 8000ec8:	f7ff fedc 	bl	8000c84 <LCD_Display_Config>
}
 8000ecc:	e05b      	b.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
			}else if(CURRENT_MODE == MODE_CONFIG_HUMI){
 8000ece:	4b31      	ldr	r3, [pc, #196]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x114>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d157      	bne.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
				CURRENT_MODE = MODE_SHOWDATA;
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x114>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
				LCD_Display_Data();
 8000edc:	f7ff ff0c 	bl	8000cf8 <LCD_Display_Data>
}
 8000ee0:	e051      	b.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
	}else if(GPIO_Pin == GPIO_PIN_4){
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	2b10      	cmp	r3, #16
 8000ee6:	d125      	bne.n	8000f34 <HAL_GPIO_EXTI_Callback+0xb4>
		delay_us(20000);
 8000ee8:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000eec:	f7ff fb78 	bl	80005e0 <delay_us>
		if(CURRENT_MODE == MODE_CONFIG_TEMP && dataConfig.i_temp_config < 100){
 8000ef0:	4b28      	ldr	r3, [pc, #160]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x114>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10c      	bne.n	8000f12 <HAL_GPIO_EXTI_Callback+0x92>
 8000ef8:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x118>)
 8000efa:	785b      	ldrb	r3, [r3, #1]
 8000efc:	2b63      	cmp	r3, #99	@ 0x63
 8000efe:	d808      	bhi.n	8000f12 <HAL_GPIO_EXTI_Callback+0x92>
			dataConfig.i_temp_config++;
 8000f00:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f02:	785b      	ldrb	r3, [r3, #1]
 8000f04:	3301      	adds	r3, #1
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f0a:	705a      	strb	r2, [r3, #1]
			LCD_Display_Config();
 8000f0c:	f7ff feba 	bl	8000c84 <LCD_Display_Config>
 8000f10:	e039      	b.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
		}else if(CURRENT_MODE == MODE_CONFIG_HUMI && dataConfig.i_humi_config < 100){
 8000f12:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x114>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d135      	bne.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b63      	cmp	r3, #99	@ 0x63
 8000f20:	d831      	bhi.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
			dataConfig.i_humi_config++;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f2c:	701a      	strb	r2, [r3, #0]
			LCD_Display_Config();
 8000f2e:	f7ff fea9 	bl	8000c84 <LCD_Display_Config>
}
 8000f32:	e028      	b.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
	}else if(GPIO_Pin == GPIO_PIN_5){
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	2b20      	cmp	r3, #32
 8000f38:	d125      	bne.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
		delay_us(20000);
 8000f3a:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000f3e:	f7ff fb4f 	bl	80005e0 <delay_us>
		if(CURRENT_MODE == MODE_CONFIG_TEMP && dataConfig.i_temp_config > 0 ){
 8000f42:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x114>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d10c      	bne.n	8000f64 <HAL_GPIO_EXTI_Callback+0xe4>
 8000f4a:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f4c:	785b      	ldrb	r3, [r3, #1]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d008      	beq.n	8000f64 <HAL_GPIO_EXTI_Callback+0xe4>
			dataConfig.i_temp_config--;
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f54:	785b      	ldrb	r3, [r3, #1]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f5c:	705a      	strb	r2, [r3, #1]
			LCD_Display_Config();
 8000f5e:	f7ff fe91 	bl	8000c84 <LCD_Display_Config>
 8000f62:	e010      	b.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
		}else if(CURRENT_MODE == MODE_CONFIG_HUMI && dataConfig.i_humi_config > 0){
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x114>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d10c      	bne.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d008      	beq.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
			dataConfig.i_humi_config--;
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f7e:	701a      	strb	r2, [r3, #0]
			LCD_Display_Config();
 8000f80:	f7ff fe80 	bl	8000c84 <LCD_Display_Config>
}
 8000f84:	e7ff      	b.n	8000f86 <HAL_GPIO_EXTI_Callback+0x106>
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020400 	.word	0x40020400
 8000f94:	20000098 	.word	0x20000098
 8000f98:	2000009c 	.word	0x2000009c

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	@ 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2230      	movs	r2, #48	@ 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 f9fd 	bl	80023aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b22      	ldr	r3, [pc, #136]	@ (8001050 <SystemClock_Config+0xb4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	4a21      	ldr	r2, [pc, #132]	@ (8001050 <SystemClock_Config+0xb4>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <SystemClock_Config+0xb4>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <SystemClock_Config+0xb8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8001054 <SystemClock_Config+0xb8>)
 8000fe6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <SystemClock_Config+0xb8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2310      	movs	r3, #16
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001004:	2300      	movs	r3, #0
 8001006:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fc81 	bl	8001914 <HAL_RCC_OscConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001018:	f000 f81e 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101c:	230f      	movs	r3, #15
 800101e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fee4 	bl	8001e04 <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001042:	f000 f809 	bl	8001058 <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	3750      	adds	r7, #80	@ 0x50
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40007000 	.word	0x40007000

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <Error_Handler+0x8>

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	4a0f      	ldr	r2, [pc, #60]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001078:	6453      	str	r3, [r2, #68]	@ 0x44
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	@ 0x40
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <NMI_Handler+0x4>

080010bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <MemManage_Handler+0x4>

080010cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <UsageFault_Handler+0x4>

080010dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110a:	f000 f8c7 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	@ (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f001 f980 	bl	8002448 <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	@ (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20020000 	.word	0x20020000
 8001174:	00000400 	.word	0x00000400
 8001178:	200000e8 	.word	0x200000e8
 800117c:	200002e8 	.word	0x200002e8

08001180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011a8:	f7ff ffea 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	@ (80011e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	@ (80011f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d2:	f001 f93f 	bl	8002454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f7ff fdbb 	bl	8000d50 <main>
  bx  lr    
 80011da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011e8:	08003448 	.word	0x08003448
  ldr r2, =_sbss
 80011ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011f0:	200002e8 	.word	0x200002e8

080011f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0d      	ldr	r2, [pc, #52]	@ (8001238 <HAL_Init+0x40>)
 8001202:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001208:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <HAL_Init+0x40>)
 800120e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a07      	ldr	r2, [pc, #28]	@ (8001238 <HAL_Init+0x40>)
 800121a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800121e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 f94f 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001226:	200f      	movs	r0, #15
 8001228:	f000 f808 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800122c:	f7ff ff1a 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023c00 	.word	0x40023c00

0800123c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_InitTick+0x54>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_InitTick+0x58>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f967 	bl	800152e <HAL_SYSTICK_Config>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00e      	b.n	8001288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d80a      	bhi.n	8001286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f000 f92f 	bl	80014da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4a06      	ldr	r2, [pc, #24]	@ (8001298 <HAL_InitTick+0x5c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000004 	.word	0x20000004
 8001294:	2000000c 	.word	0x2000000c
 8001298:	20000008 	.word	0x20000008

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000000c 	.word	0x2000000c
 80012c0:	200000ec 	.word	0x200000ec

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	200000ec 	.word	0x200000ec

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff ffee 	bl	80012c4 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffde 	bl	80012c4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000000c 	.word	0x2000000c

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4907      	ldr	r1, [pc, #28]	@ (80013c0 <__NVIC_EnableIRQ+0x38>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	@ (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	@ (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	@ 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	@ 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f7ff ff8e 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff29 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff3e 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff8e 	bl	8001418 <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5d 	bl	80013c4 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff31 	bl	8001388 <__NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa2 	bl	8001480 <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	@ 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e16b      	b.n	800183c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 815a 	bne.w	8001836 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d005      	beq.n	800159a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001596:	2b02      	cmp	r3, #2
 8001598:	d130      	bne.n	80015fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 0201 	and.w	r2, r3, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b03      	cmp	r3, #3
 8001606:	d017      	beq.n	8001638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d123      	bne.n	800168c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3208      	adds	r2, #8
 800164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	69b9      	ldr	r1, [r7, #24]
 8001688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0203 	and.w	r2, r3, #3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80b4 	beq.w	8001836 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b60      	ldr	r3, [pc, #384]	@ (8001854 <HAL_GPIO_Init+0x30c>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001854 <HAL_GPIO_Init+0x30c>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016de:	4b5d      	ldr	r3, [pc, #372]	@ (8001854 <HAL_GPIO_Init+0x30c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001858 <HAL_GPIO_Init+0x310>)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a52      	ldr	r2, [pc, #328]	@ (800185c <HAL_GPIO_Init+0x314>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d02b      	beq.n	800176e <HAL_GPIO_Init+0x226>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a51      	ldr	r2, [pc, #324]	@ (8001860 <HAL_GPIO_Init+0x318>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d025      	beq.n	800176a <HAL_GPIO_Init+0x222>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a50      	ldr	r2, [pc, #320]	@ (8001864 <HAL_GPIO_Init+0x31c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d01f      	beq.n	8001766 <HAL_GPIO_Init+0x21e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4f      	ldr	r2, [pc, #316]	@ (8001868 <HAL_GPIO_Init+0x320>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d019      	beq.n	8001762 <HAL_GPIO_Init+0x21a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4e      	ldr	r2, [pc, #312]	@ (800186c <HAL_GPIO_Init+0x324>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0x216>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4d      	ldr	r2, [pc, #308]	@ (8001870 <HAL_GPIO_Init+0x328>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00d      	beq.n	800175a <HAL_GPIO_Init+0x212>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4c      	ldr	r2, [pc, #304]	@ (8001874 <HAL_GPIO_Init+0x32c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d007      	beq.n	8001756 <HAL_GPIO_Init+0x20e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4b      	ldr	r2, [pc, #300]	@ (8001878 <HAL_GPIO_Init+0x330>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_GPIO_Init+0x20a>
 800174e:	2307      	movs	r3, #7
 8001750:	e00e      	b.n	8001770 <HAL_GPIO_Init+0x228>
 8001752:	2308      	movs	r3, #8
 8001754:	e00c      	b.n	8001770 <HAL_GPIO_Init+0x228>
 8001756:	2306      	movs	r3, #6
 8001758:	e00a      	b.n	8001770 <HAL_GPIO_Init+0x228>
 800175a:	2305      	movs	r3, #5
 800175c:	e008      	b.n	8001770 <HAL_GPIO_Init+0x228>
 800175e:	2304      	movs	r3, #4
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x228>
 8001762:	2303      	movs	r3, #3
 8001764:	e004      	b.n	8001770 <HAL_GPIO_Init+0x228>
 8001766:	2302      	movs	r3, #2
 8001768:	e002      	b.n	8001770 <HAL_GPIO_Init+0x228>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x228>
 800176e:	2300      	movs	r3, #0
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	f002 0203 	and.w	r2, r2, #3
 8001776:	0092      	lsls	r2, r2, #2
 8001778:	4093      	lsls	r3, r2
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001780:	4935      	ldr	r1, [pc, #212]	@ (8001858 <HAL_GPIO_Init+0x310>)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178e:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <HAL_GPIO_Init+0x334>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017b2:	4a32      	ldr	r2, [pc, #200]	@ (800187c <HAL_GPIO_Init+0x334>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b8:	4b30      	ldr	r3, [pc, #192]	@ (800187c <HAL_GPIO_Init+0x334>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017dc:	4a27      	ldr	r2, [pc, #156]	@ (800187c <HAL_GPIO_Init+0x334>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017e2:	4b26      	ldr	r3, [pc, #152]	@ (800187c <HAL_GPIO_Init+0x334>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001806:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <HAL_GPIO_Init+0x334>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800180c:	4b1b      	ldr	r3, [pc, #108]	@ (800187c <HAL_GPIO_Init+0x334>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001830:	4a12      	ldr	r2, [pc, #72]	@ (800187c <HAL_GPIO_Init+0x334>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3301      	adds	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	2b0f      	cmp	r3, #15
 8001840:	f67f ae90 	bls.w	8001564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3724      	adds	r7, #36	@ 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40013800 	.word	0x40013800
 800185c:	40020000 	.word	0x40020000
 8001860:	40020400 	.word	0x40020400
 8001864:	40020800 	.word	0x40020800
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40021000 	.word	0x40021000
 8001870:	40021400 	.word	0x40021400
 8001874:	40021800 	.word	0x40021800
 8001878:	40021c00 	.word	0x40021c00
 800187c:	40013c00 	.word	0x40013c00

08001880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e001      	b.n	80018a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
 80018bc:	4613      	mov	r3, r2
 80018be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c0:	787b      	ldrb	r3, [r7, #1]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018cc:	e003      	b.n	80018d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	041a      	lsls	r2, r3, #16
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	619a      	str	r2, [r3, #24]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018ee:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018fa:	4a05      	ldr	r2, [pc, #20]	@ (8001910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fabc 	bl	8000e80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40013c00 	.word	0x40013c00

08001914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e267      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d075      	beq.n	8001a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001932:	4b88      	ldr	r3, [pc, #544]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b04      	cmp	r3, #4
 800193c:	d00c      	beq.n	8001958 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193e:	4b85      	ldr	r3, [pc, #532]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001946:	2b08      	cmp	r3, #8
 8001948:	d112      	bne.n	8001970 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800194a:	4b82      	ldr	r3, [pc, #520]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001956:	d10b      	bne.n	8001970 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	4b7e      	ldr	r3, [pc, #504]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d05b      	beq.n	8001a1c <HAL_RCC_OscConfig+0x108>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d157      	bne.n	8001a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e242      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001978:	d106      	bne.n	8001988 <HAL_RCC_OscConfig+0x74>
 800197a:	4b76      	ldr	r3, [pc, #472]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a75      	ldr	r2, [pc, #468]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e01d      	b.n	80019c4 <HAL_RCC_OscConfig+0xb0>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x98>
 8001992:	4b70      	ldr	r3, [pc, #448]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a6f      	ldr	r2, [pc, #444]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0xb0>
 80019ac:	4b69      	ldr	r3, [pc, #420]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a68      	ldr	r2, [pc, #416]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b66      	ldr	r3, [pc, #408]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a65      	ldr	r2, [pc, #404]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d013      	beq.n	80019f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fc7a 	bl	80012c4 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff fc76 	bl	80012c4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	@ 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e207      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0xc0>
 80019f2:	e014      	b.n	8001a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fc66 	bl	80012c4 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fc62 	bl	80012c4 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	@ 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e1f3      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0e:	4b51      	ldr	r3, [pc, #324]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0xe8>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d063      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00b      	beq.n	8001a4e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a36:	4b47      	ldr	r3, [pc, #284]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d11c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a42:	4b44      	ldr	r3, [pc, #272]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d116      	bne.n	8001a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4e:	4b41      	ldr	r3, [pc, #260]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_RCC_OscConfig+0x152>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e1c7      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a66:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4937      	ldr	r1, [pc, #220]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7a:	e03a      	b.n	8001af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a84:	4b34      	ldr	r3, [pc, #208]	@ (8001b58 <HAL_RCC_OscConfig+0x244>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fc1b 	bl	80012c4 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff fc17 	bl	80012c4 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e1a8      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b28      	ldr	r3, [pc, #160]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4925      	ldr	r1, [pc, #148]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
 8001ac4:	e015      	b.n	8001af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac6:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <HAL_RCC_OscConfig+0x244>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff fbfa 	bl	80012c4 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad4:	f7ff fbf6 	bl	80012c4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e187      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d036      	beq.n	8001b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d016      	beq.n	8001b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_RCC_OscConfig+0x248>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff fbda 	bl	80012c4 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b14:	f7ff fbd6 	bl	80012c4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e167      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b26:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x200>
 8001b32:	e01b      	b.n	8001b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_RCC_OscConfig+0x248>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff fbc3 	bl	80012c4 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b40:	e00e      	b.n	8001b60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b42:	f7ff fbbf 	bl	80012c4 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d907      	bls.n	8001b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e150      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
 8001b54:	40023800 	.word	0x40023800
 8001b58:	42470000 	.word	0x42470000
 8001b5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b60:	4b88      	ldr	r3, [pc, #544]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ea      	bne.n	8001b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 8097 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7e:	4b81      	ldr	r3, [pc, #516]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10f      	bne.n	8001baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	4a7c      	ldr	r2, [pc, #496]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001baa:	4b77      	ldr	r3, [pc, #476]	@ (8001d88 <HAL_RCC_OscConfig+0x474>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d118      	bne.n	8001be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb6:	4b74      	ldr	r3, [pc, #464]	@ (8001d88 <HAL_RCC_OscConfig+0x474>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a73      	ldr	r2, [pc, #460]	@ (8001d88 <HAL_RCC_OscConfig+0x474>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fb7f 	bl	80012c4 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7ff fb7b 	bl	80012c4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e10c      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8001d88 <HAL_RCC_OscConfig+0x474>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x2ea>
 8001bf0:	4b64      	ldr	r3, [pc, #400]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf4:	4a63      	ldr	r2, [pc, #396]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bfc:	e01c      	b.n	8001c38 <HAL_RCC_OscConfig+0x324>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x30c>
 8001c06:	4b5f      	ldr	r3, [pc, #380]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c12:	4b5c      	ldr	r3, [pc, #368]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c16:	4a5b      	ldr	r2, [pc, #364]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCC_OscConfig+0x324>
 8001c20:	4b58      	ldr	r3, [pc, #352]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c24:	4a57      	ldr	r2, [pc, #348]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c2c:	4b55      	ldr	r3, [pc, #340]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c30:	4a54      	ldr	r2, [pc, #336]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c32:	f023 0304 	bic.w	r3, r3, #4
 8001c36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d015      	beq.n	8001c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c40:	f7ff fb40 	bl	80012c4 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c48:	f7ff fb3c 	bl	80012c4 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0cb      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5e:	4b49      	ldr	r3, [pc, #292]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0ee      	beq.n	8001c48 <HAL_RCC_OscConfig+0x334>
 8001c6a:	e014      	b.n	8001c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7ff fb2a 	bl	80012c4 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c74:	f7ff fb26 	bl	80012c4 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e0b5      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1ee      	bne.n	8001c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c96:	7dfb      	ldrb	r3, [r7, #23]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d105      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9c:	4b39      	ldr	r3, [pc, #228]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	4a38      	ldr	r2, [pc, #224]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ca6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a1 	beq.w	8001df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cb2:	4b34      	ldr	r3, [pc, #208]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d05c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d141      	bne.n	8001d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b31      	ldr	r3, [pc, #196]	@ (8001d8c <HAL_RCC_OscConfig+0x478>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fafa 	bl	80012c4 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff faf6 	bl	80012c4 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e087      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce6:	4b27      	ldr	r3, [pc, #156]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	019b      	lsls	r3, r3, #6
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	041b      	lsls	r3, r3, #16
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	491b      	ldr	r1, [pc, #108]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <HAL_RCC_OscConfig+0x478>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7ff facf 	bl	80012c4 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff facb 	bl	80012c4 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e05c      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x416>
 8001d48:	e054      	b.n	8001df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <HAL_RCC_OscConfig+0x478>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fab8 	bl	80012c4 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d58:	f7ff fab4 	bl	80012c4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e045      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x444>
 8001d76:	e03d      	b.n	8001df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e038      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <HAL_RCC_OscConfig+0x4ec>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d028      	beq.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d121      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d11a      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d111      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	085b      	lsrs	r3, r3, #1
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0cc      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b68      	ldr	r3, [pc, #416]	@ (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d90c      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b65      	ldr	r3, [pc, #404]	@ (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b63      	ldr	r3, [pc, #396]	@ (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b8      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e58:	4b59      	ldr	r3, [pc, #356]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a58      	ldr	r2, [pc, #352]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e70:	4b53      	ldr	r3, [pc, #332]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4a52      	ldr	r2, [pc, #328]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b50      	ldr	r3, [pc, #320]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	494d      	ldr	r1, [pc, #308]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d044      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b47      	ldr	r3, [pc, #284]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d119      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d003      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e06f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e067      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b37      	ldr	r3, [pc, #220]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4934      	ldr	r1, [pc, #208]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef4:	f7ff f9e6 	bl	80012c4 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff f9e2 	bl	80012c4 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e04f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f24:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d20c      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e032      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f58:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4916      	ldr	r1, [pc, #88]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f76:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	490e      	ldr	r1, [pc, #56]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f8a:	f000 f821 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	490a      	ldr	r1, [pc, #40]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	5ccb      	ldrb	r3, [r1, r3]
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	4a09      	ldr	r2, [pc, #36]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f946 	bl	800123c <HAL_InitTick>

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023c00 	.word	0x40023c00
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	080033d8 	.word	0x080033d8
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fd4:	b090      	sub	sp, #64	@ 0x40
 8001fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe8:	4b59      	ldr	r3, [pc, #356]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d00d      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x40>
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	f200 80a1 	bhi.w	800213c <HAL_RCC_GetSysClockFreq+0x16c>
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x34>
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d003      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x3a>
 8002002:	e09b      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b53      	ldr	r3, [pc, #332]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x184>)
 8002006:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002008:	e09b      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800200a:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x188>)
 800200c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800200e:	e098      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002010:	4b4f      	ldr	r3, [pc, #316]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002018:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800201a:	4b4d      	ldr	r3, [pc, #308]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d028      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002026:	4b4a      	ldr	r3, [pc, #296]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	099b      	lsrs	r3, r3, #6
 800202c:	2200      	movs	r2, #0
 800202e:	623b      	str	r3, [r7, #32]
 8002030:	627a      	str	r2, [r7, #36]	@ 0x24
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002038:	2100      	movs	r1, #0
 800203a:	4b47      	ldr	r3, [pc, #284]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x188>)
 800203c:	fb03 f201 	mul.w	r2, r3, r1
 8002040:	2300      	movs	r3, #0
 8002042:	fb00 f303 	mul.w	r3, r0, r3
 8002046:	4413      	add	r3, r2
 8002048:	4a43      	ldr	r2, [pc, #268]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x188>)
 800204a:	fba0 1202 	umull	r1, r2, r0, r2
 800204e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002050:	460a      	mov	r2, r1
 8002052:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002056:	4413      	add	r3, r2
 8002058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800205a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800205c:	2200      	movs	r2, #0
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	61fa      	str	r2, [r7, #28]
 8002062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002066:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800206a:	f7fe f909 	bl	8000280 <__aeabi_uldivmod>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4613      	mov	r3, r2
 8002074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002076:	e053      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002078:	4b35      	ldr	r3, [pc, #212]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	2200      	movs	r2, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	617a      	str	r2, [r7, #20]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800208a:	f04f 0b00 	mov.w	fp, #0
 800208e:	4652      	mov	r2, sl
 8002090:	465b      	mov	r3, fp
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	0159      	lsls	r1, r3, #5
 800209c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a0:	0150      	lsls	r0, r2, #5
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	ebb2 080a 	subs.w	r8, r2, sl
 80020aa:	eb63 090b 	sbc.w	r9, r3, fp
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020c2:	ebb2 0408 	subs.w	r4, r2, r8
 80020c6:	eb63 0509 	sbc.w	r5, r3, r9
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	00eb      	lsls	r3, r5, #3
 80020d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020d8:	00e2      	lsls	r2, r4, #3
 80020da:	4614      	mov	r4, r2
 80020dc:	461d      	mov	r5, r3
 80020de:	eb14 030a 	adds.w	r3, r4, sl
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	eb45 030b 	adc.w	r3, r5, fp
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020f6:	4629      	mov	r1, r5
 80020f8:	028b      	lsls	r3, r1, #10
 80020fa:	4621      	mov	r1, r4
 80020fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002100:	4621      	mov	r1, r4
 8002102:	028a      	lsls	r2, r1, #10
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800210a:	2200      	movs	r2, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	60fa      	str	r2, [r7, #12]
 8002110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002114:	f7fe f8b4 	bl	8000280 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4613      	mov	r3, r2
 800211e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	3301      	adds	r3, #1
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002130:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800213a:	e002      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x184>)
 800213e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002144:	4618      	mov	r0, r3
 8002146:	3740      	adds	r7, #64	@ 0x40
 8002148:	46bd      	mov	sp, r7
 800214a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	00f42400 	.word	0x00f42400
 8002158:	017d7840 	.word	0x017d7840

0800215c <std>:
 800215c:	2300      	movs	r3, #0
 800215e:	b510      	push	{r4, lr}
 8002160:	4604      	mov	r4, r0
 8002162:	e9c0 3300 	strd	r3, r3, [r0]
 8002166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800216a:	6083      	str	r3, [r0, #8]
 800216c:	8181      	strh	r1, [r0, #12]
 800216e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002170:	81c2      	strh	r2, [r0, #14]
 8002172:	6183      	str	r3, [r0, #24]
 8002174:	4619      	mov	r1, r3
 8002176:	2208      	movs	r2, #8
 8002178:	305c      	adds	r0, #92	@ 0x5c
 800217a:	f000 f916 	bl	80023aa <memset>
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <std+0x58>)
 8002180:	6263      	str	r3, [r4, #36]	@ 0x24
 8002182:	4b0d      	ldr	r3, [pc, #52]	@ (80021b8 <std+0x5c>)
 8002184:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002186:	4b0d      	ldr	r3, [pc, #52]	@ (80021bc <std+0x60>)
 8002188:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800218a:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <std+0x64>)
 800218c:	6323      	str	r3, [r4, #48]	@ 0x30
 800218e:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <std+0x68>)
 8002190:	6224      	str	r4, [r4, #32]
 8002192:	429c      	cmp	r4, r3
 8002194:	d006      	beq.n	80021a4 <std+0x48>
 8002196:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800219a:	4294      	cmp	r4, r2
 800219c:	d002      	beq.n	80021a4 <std+0x48>
 800219e:	33d0      	adds	r3, #208	@ 0xd0
 80021a0:	429c      	cmp	r4, r3
 80021a2:	d105      	bne.n	80021b0 <std+0x54>
 80021a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80021a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021ac:	f000 b976 	b.w	800249c <__retarget_lock_init_recursive>
 80021b0:	bd10      	pop	{r4, pc}
 80021b2:	bf00      	nop
 80021b4:	08002325 	.word	0x08002325
 80021b8:	08002347 	.word	0x08002347
 80021bc:	0800237f 	.word	0x0800237f
 80021c0:	080023a3 	.word	0x080023a3
 80021c4:	200000f0 	.word	0x200000f0

080021c8 <stdio_exit_handler>:
 80021c8:	4a02      	ldr	r2, [pc, #8]	@ (80021d4 <stdio_exit_handler+0xc>)
 80021ca:	4903      	ldr	r1, [pc, #12]	@ (80021d8 <stdio_exit_handler+0x10>)
 80021cc:	4803      	ldr	r0, [pc, #12]	@ (80021dc <stdio_exit_handler+0x14>)
 80021ce:	f000 b869 	b.w	80022a4 <_fwalk_sglue>
 80021d2:	bf00      	nop
 80021d4:	20000010 	.word	0x20000010
 80021d8:	08002d65 	.word	0x08002d65
 80021dc:	20000020 	.word	0x20000020

080021e0 <cleanup_stdio>:
 80021e0:	6841      	ldr	r1, [r0, #4]
 80021e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <cleanup_stdio+0x34>)
 80021e4:	4299      	cmp	r1, r3
 80021e6:	b510      	push	{r4, lr}
 80021e8:	4604      	mov	r4, r0
 80021ea:	d001      	beq.n	80021f0 <cleanup_stdio+0x10>
 80021ec:	f000 fdba 	bl	8002d64 <_fflush_r>
 80021f0:	68a1      	ldr	r1, [r4, #8]
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <cleanup_stdio+0x38>)
 80021f4:	4299      	cmp	r1, r3
 80021f6:	d002      	beq.n	80021fe <cleanup_stdio+0x1e>
 80021f8:	4620      	mov	r0, r4
 80021fa:	f000 fdb3 	bl	8002d64 <_fflush_r>
 80021fe:	68e1      	ldr	r1, [r4, #12]
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <cleanup_stdio+0x3c>)
 8002202:	4299      	cmp	r1, r3
 8002204:	d004      	beq.n	8002210 <cleanup_stdio+0x30>
 8002206:	4620      	mov	r0, r4
 8002208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800220c:	f000 bdaa 	b.w	8002d64 <_fflush_r>
 8002210:	bd10      	pop	{r4, pc}
 8002212:	bf00      	nop
 8002214:	200000f0 	.word	0x200000f0
 8002218:	20000158 	.word	0x20000158
 800221c:	200001c0 	.word	0x200001c0

08002220 <global_stdio_init.part.0>:
 8002220:	b510      	push	{r4, lr}
 8002222:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <global_stdio_init.part.0+0x30>)
 8002224:	4c0b      	ldr	r4, [pc, #44]	@ (8002254 <global_stdio_init.part.0+0x34>)
 8002226:	4a0c      	ldr	r2, [pc, #48]	@ (8002258 <global_stdio_init.part.0+0x38>)
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	4620      	mov	r0, r4
 800222c:	2200      	movs	r2, #0
 800222e:	2104      	movs	r1, #4
 8002230:	f7ff ff94 	bl	800215c <std>
 8002234:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002238:	2201      	movs	r2, #1
 800223a:	2109      	movs	r1, #9
 800223c:	f7ff ff8e 	bl	800215c <std>
 8002240:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002244:	2202      	movs	r2, #2
 8002246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800224a:	2112      	movs	r1, #18
 800224c:	f7ff bf86 	b.w	800215c <std>
 8002250:	20000228 	.word	0x20000228
 8002254:	200000f0 	.word	0x200000f0
 8002258:	080021c9 	.word	0x080021c9

0800225c <__sfp_lock_acquire>:
 800225c:	4801      	ldr	r0, [pc, #4]	@ (8002264 <__sfp_lock_acquire+0x8>)
 800225e:	f000 b91e 	b.w	800249e <__retarget_lock_acquire_recursive>
 8002262:	bf00      	nop
 8002264:	20000231 	.word	0x20000231

08002268 <__sfp_lock_release>:
 8002268:	4801      	ldr	r0, [pc, #4]	@ (8002270 <__sfp_lock_release+0x8>)
 800226a:	f000 b919 	b.w	80024a0 <__retarget_lock_release_recursive>
 800226e:	bf00      	nop
 8002270:	20000231 	.word	0x20000231

08002274 <__sinit>:
 8002274:	b510      	push	{r4, lr}
 8002276:	4604      	mov	r4, r0
 8002278:	f7ff fff0 	bl	800225c <__sfp_lock_acquire>
 800227c:	6a23      	ldr	r3, [r4, #32]
 800227e:	b11b      	cbz	r3, 8002288 <__sinit+0x14>
 8002280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002284:	f7ff bff0 	b.w	8002268 <__sfp_lock_release>
 8002288:	4b04      	ldr	r3, [pc, #16]	@ (800229c <__sinit+0x28>)
 800228a:	6223      	str	r3, [r4, #32]
 800228c:	4b04      	ldr	r3, [pc, #16]	@ (80022a0 <__sinit+0x2c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f5      	bne.n	8002280 <__sinit+0xc>
 8002294:	f7ff ffc4 	bl	8002220 <global_stdio_init.part.0>
 8002298:	e7f2      	b.n	8002280 <__sinit+0xc>
 800229a:	bf00      	nop
 800229c:	080021e1 	.word	0x080021e1
 80022a0:	20000228 	.word	0x20000228

080022a4 <_fwalk_sglue>:
 80022a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022a8:	4607      	mov	r7, r0
 80022aa:	4688      	mov	r8, r1
 80022ac:	4614      	mov	r4, r2
 80022ae:	2600      	movs	r6, #0
 80022b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80022b4:	f1b9 0901 	subs.w	r9, r9, #1
 80022b8:	d505      	bpl.n	80022c6 <_fwalk_sglue+0x22>
 80022ba:	6824      	ldr	r4, [r4, #0]
 80022bc:	2c00      	cmp	r4, #0
 80022be:	d1f7      	bne.n	80022b0 <_fwalk_sglue+0xc>
 80022c0:	4630      	mov	r0, r6
 80022c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022c6:	89ab      	ldrh	r3, [r5, #12]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d907      	bls.n	80022dc <_fwalk_sglue+0x38>
 80022cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022d0:	3301      	adds	r3, #1
 80022d2:	d003      	beq.n	80022dc <_fwalk_sglue+0x38>
 80022d4:	4629      	mov	r1, r5
 80022d6:	4638      	mov	r0, r7
 80022d8:	47c0      	blx	r8
 80022da:	4306      	orrs	r6, r0
 80022dc:	3568      	adds	r5, #104	@ 0x68
 80022de:	e7e9      	b.n	80022b4 <_fwalk_sglue+0x10>

080022e0 <siprintf>:
 80022e0:	b40e      	push	{r1, r2, r3}
 80022e2:	b510      	push	{r4, lr}
 80022e4:	b09d      	sub	sp, #116	@ 0x74
 80022e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80022e8:	9002      	str	r0, [sp, #8]
 80022ea:	9006      	str	r0, [sp, #24]
 80022ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80022f0:	480a      	ldr	r0, [pc, #40]	@ (800231c <siprintf+0x3c>)
 80022f2:	9107      	str	r1, [sp, #28]
 80022f4:	9104      	str	r1, [sp, #16]
 80022f6:	490a      	ldr	r1, [pc, #40]	@ (8002320 <siprintf+0x40>)
 80022f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80022fc:	9105      	str	r1, [sp, #20]
 80022fe:	2400      	movs	r4, #0
 8002300:	a902      	add	r1, sp, #8
 8002302:	6800      	ldr	r0, [r0, #0]
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002308:	f000 fa20 	bl	800274c <_svfiprintf_r>
 800230c:	9b02      	ldr	r3, [sp, #8]
 800230e:	701c      	strb	r4, [r3, #0]
 8002310:	b01d      	add	sp, #116	@ 0x74
 8002312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002316:	b003      	add	sp, #12
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	2000001c 	.word	0x2000001c
 8002320:	ffff0208 	.word	0xffff0208

08002324 <__sread>:
 8002324:	b510      	push	{r4, lr}
 8002326:	460c      	mov	r4, r1
 8002328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800232c:	f000 f868 	bl	8002400 <_read_r>
 8002330:	2800      	cmp	r0, #0
 8002332:	bfab      	itete	ge
 8002334:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002336:	89a3      	ldrhlt	r3, [r4, #12]
 8002338:	181b      	addge	r3, r3, r0
 800233a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800233e:	bfac      	ite	ge
 8002340:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002342:	81a3      	strhlt	r3, [r4, #12]
 8002344:	bd10      	pop	{r4, pc}

08002346 <__swrite>:
 8002346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800234a:	461f      	mov	r7, r3
 800234c:	898b      	ldrh	r3, [r1, #12]
 800234e:	05db      	lsls	r3, r3, #23
 8002350:	4605      	mov	r5, r0
 8002352:	460c      	mov	r4, r1
 8002354:	4616      	mov	r6, r2
 8002356:	d505      	bpl.n	8002364 <__swrite+0x1e>
 8002358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800235c:	2302      	movs	r3, #2
 800235e:	2200      	movs	r2, #0
 8002360:	f000 f83c 	bl	80023dc <_lseek_r>
 8002364:	89a3      	ldrh	r3, [r4, #12]
 8002366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800236a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800236e:	81a3      	strh	r3, [r4, #12]
 8002370:	4632      	mov	r2, r6
 8002372:	463b      	mov	r3, r7
 8002374:	4628      	mov	r0, r5
 8002376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800237a:	f000 b853 	b.w	8002424 <_write_r>

0800237e <__sseek>:
 800237e:	b510      	push	{r4, lr}
 8002380:	460c      	mov	r4, r1
 8002382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002386:	f000 f829 	bl	80023dc <_lseek_r>
 800238a:	1c43      	adds	r3, r0, #1
 800238c:	89a3      	ldrh	r3, [r4, #12]
 800238e:	bf15      	itete	ne
 8002390:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002392:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002396:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800239a:	81a3      	strheq	r3, [r4, #12]
 800239c:	bf18      	it	ne
 800239e:	81a3      	strhne	r3, [r4, #12]
 80023a0:	bd10      	pop	{r4, pc}

080023a2 <__sclose>:
 80023a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023a6:	f000 b809 	b.w	80023bc <_close_r>

080023aa <memset>:
 80023aa:	4402      	add	r2, r0
 80023ac:	4603      	mov	r3, r0
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d100      	bne.n	80023b4 <memset+0xa>
 80023b2:	4770      	bx	lr
 80023b4:	f803 1b01 	strb.w	r1, [r3], #1
 80023b8:	e7f9      	b.n	80023ae <memset+0x4>
	...

080023bc <_close_r>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	4d06      	ldr	r5, [pc, #24]	@ (80023d8 <_close_r+0x1c>)
 80023c0:	2300      	movs	r3, #0
 80023c2:	4604      	mov	r4, r0
 80023c4:	4608      	mov	r0, r1
 80023c6:	602b      	str	r3, [r5, #0]
 80023c8:	f000 fe34 	bl	8003034 <_close>
 80023cc:	1c43      	adds	r3, r0, #1
 80023ce:	d102      	bne.n	80023d6 <_close_r+0x1a>
 80023d0:	682b      	ldr	r3, [r5, #0]
 80023d2:	b103      	cbz	r3, 80023d6 <_close_r+0x1a>
 80023d4:	6023      	str	r3, [r4, #0]
 80023d6:	bd38      	pop	{r3, r4, r5, pc}
 80023d8:	2000022c 	.word	0x2000022c

080023dc <_lseek_r>:
 80023dc:	b538      	push	{r3, r4, r5, lr}
 80023de:	4d07      	ldr	r5, [pc, #28]	@ (80023fc <_lseek_r+0x20>)
 80023e0:	4604      	mov	r4, r0
 80023e2:	4608      	mov	r0, r1
 80023e4:	4611      	mov	r1, r2
 80023e6:	2200      	movs	r2, #0
 80023e8:	602a      	str	r2, [r5, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f000 fde3 	bl	8002fb6 <_lseek>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	d102      	bne.n	80023fa <_lseek_r+0x1e>
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	b103      	cbz	r3, 80023fa <_lseek_r+0x1e>
 80023f8:	6023      	str	r3, [r4, #0]
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	2000022c 	.word	0x2000022c

08002400 <_read_r>:
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4d07      	ldr	r5, [pc, #28]	@ (8002420 <_read_r+0x20>)
 8002404:	4604      	mov	r4, r0
 8002406:	4608      	mov	r0, r1
 8002408:	4611      	mov	r1, r2
 800240a:	2200      	movs	r2, #0
 800240c:	602a      	str	r2, [r5, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f000 fd7b 	bl	8002f0a <_read>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	d102      	bne.n	800241e <_read_r+0x1e>
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	b103      	cbz	r3, 800241e <_read_r+0x1e>
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	2000022c 	.word	0x2000022c

08002424 <_write_r>:
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	4d07      	ldr	r5, [pc, #28]	@ (8002444 <_write_r+0x20>)
 8002428:	4604      	mov	r4, r0
 800242a:	4608      	mov	r0, r1
 800242c:	4611      	mov	r1, r2
 800242e:	2200      	movs	r2, #0
 8002430:	602a      	str	r2, [r5, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	f000 fdd1 	bl	8002fda <_write>
 8002438:	1c43      	adds	r3, r0, #1
 800243a:	d102      	bne.n	8002442 <_write_r+0x1e>
 800243c:	682b      	ldr	r3, [r5, #0]
 800243e:	b103      	cbz	r3, 8002442 <_write_r+0x1e>
 8002440:	6023      	str	r3, [r4, #0]
 8002442:	bd38      	pop	{r3, r4, r5, pc}
 8002444:	2000022c 	.word	0x2000022c

08002448 <__errno>:
 8002448:	4b01      	ldr	r3, [pc, #4]	@ (8002450 <__errno+0x8>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	2000001c 	.word	0x2000001c

08002454 <__libc_init_array>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	4d0d      	ldr	r5, [pc, #52]	@ (800248c <__libc_init_array+0x38>)
 8002458:	4c0d      	ldr	r4, [pc, #52]	@ (8002490 <__libc_init_array+0x3c>)
 800245a:	1b64      	subs	r4, r4, r5
 800245c:	10a4      	asrs	r4, r4, #2
 800245e:	2600      	movs	r6, #0
 8002460:	42a6      	cmp	r6, r4
 8002462:	d109      	bne.n	8002478 <__libc_init_array+0x24>
 8002464:	4d0b      	ldr	r5, [pc, #44]	@ (8002494 <__libc_init_array+0x40>)
 8002466:	4c0c      	ldr	r4, [pc, #48]	@ (8002498 <__libc_init_array+0x44>)
 8002468:	f000 ff82 	bl	8003370 <_init>
 800246c:	1b64      	subs	r4, r4, r5
 800246e:	10a4      	asrs	r4, r4, #2
 8002470:	2600      	movs	r6, #0
 8002472:	42a6      	cmp	r6, r4
 8002474:	d105      	bne.n	8002482 <__libc_init_array+0x2e>
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	f855 3b04 	ldr.w	r3, [r5], #4
 800247c:	4798      	blx	r3
 800247e:	3601      	adds	r6, #1
 8002480:	e7ee      	b.n	8002460 <__libc_init_array+0xc>
 8002482:	f855 3b04 	ldr.w	r3, [r5], #4
 8002486:	4798      	blx	r3
 8002488:	3601      	adds	r6, #1
 800248a:	e7f2      	b.n	8002472 <__libc_init_array+0x1e>
 800248c:	08003440 	.word	0x08003440
 8002490:	08003440 	.word	0x08003440
 8002494:	08003440 	.word	0x08003440
 8002498:	08003444 	.word	0x08003444

0800249c <__retarget_lock_init_recursive>:
 800249c:	4770      	bx	lr

0800249e <__retarget_lock_acquire_recursive>:
 800249e:	4770      	bx	lr

080024a0 <__retarget_lock_release_recursive>:
 80024a0:	4770      	bx	lr
	...

080024a4 <_free_r>:
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	4605      	mov	r5, r0
 80024a8:	2900      	cmp	r1, #0
 80024aa:	d041      	beq.n	8002530 <_free_r+0x8c>
 80024ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024b0:	1f0c      	subs	r4, r1, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bfb8      	it	lt
 80024b6:	18e4      	addlt	r4, r4, r3
 80024b8:	f000 f8e0 	bl	800267c <__malloc_lock>
 80024bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002534 <_free_r+0x90>)
 80024be:	6813      	ldr	r3, [r2, #0]
 80024c0:	b933      	cbnz	r3, 80024d0 <_free_r+0x2c>
 80024c2:	6063      	str	r3, [r4, #4]
 80024c4:	6014      	str	r4, [r2, #0]
 80024c6:	4628      	mov	r0, r5
 80024c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024cc:	f000 b8dc 	b.w	8002688 <__malloc_unlock>
 80024d0:	42a3      	cmp	r3, r4
 80024d2:	d908      	bls.n	80024e6 <_free_r+0x42>
 80024d4:	6820      	ldr	r0, [r4, #0]
 80024d6:	1821      	adds	r1, r4, r0
 80024d8:	428b      	cmp	r3, r1
 80024da:	bf01      	itttt	eq
 80024dc:	6819      	ldreq	r1, [r3, #0]
 80024de:	685b      	ldreq	r3, [r3, #4]
 80024e0:	1809      	addeq	r1, r1, r0
 80024e2:	6021      	streq	r1, [r4, #0]
 80024e4:	e7ed      	b.n	80024c2 <_free_r+0x1e>
 80024e6:	461a      	mov	r2, r3
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	b10b      	cbz	r3, 80024f0 <_free_r+0x4c>
 80024ec:	42a3      	cmp	r3, r4
 80024ee:	d9fa      	bls.n	80024e6 <_free_r+0x42>
 80024f0:	6811      	ldr	r1, [r2, #0]
 80024f2:	1850      	adds	r0, r2, r1
 80024f4:	42a0      	cmp	r0, r4
 80024f6:	d10b      	bne.n	8002510 <_free_r+0x6c>
 80024f8:	6820      	ldr	r0, [r4, #0]
 80024fa:	4401      	add	r1, r0
 80024fc:	1850      	adds	r0, r2, r1
 80024fe:	4283      	cmp	r3, r0
 8002500:	6011      	str	r1, [r2, #0]
 8002502:	d1e0      	bne.n	80024c6 <_free_r+0x22>
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	6053      	str	r3, [r2, #4]
 800250a:	4408      	add	r0, r1
 800250c:	6010      	str	r0, [r2, #0]
 800250e:	e7da      	b.n	80024c6 <_free_r+0x22>
 8002510:	d902      	bls.n	8002518 <_free_r+0x74>
 8002512:	230c      	movs	r3, #12
 8002514:	602b      	str	r3, [r5, #0]
 8002516:	e7d6      	b.n	80024c6 <_free_r+0x22>
 8002518:	6820      	ldr	r0, [r4, #0]
 800251a:	1821      	adds	r1, r4, r0
 800251c:	428b      	cmp	r3, r1
 800251e:	bf04      	itt	eq
 8002520:	6819      	ldreq	r1, [r3, #0]
 8002522:	685b      	ldreq	r3, [r3, #4]
 8002524:	6063      	str	r3, [r4, #4]
 8002526:	bf04      	itt	eq
 8002528:	1809      	addeq	r1, r1, r0
 800252a:	6021      	streq	r1, [r4, #0]
 800252c:	6054      	str	r4, [r2, #4]
 800252e:	e7ca      	b.n	80024c6 <_free_r+0x22>
 8002530:	bd38      	pop	{r3, r4, r5, pc}
 8002532:	bf00      	nop
 8002534:	20000238 	.word	0x20000238

08002538 <sbrk_aligned>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	4e0f      	ldr	r6, [pc, #60]	@ (8002578 <sbrk_aligned+0x40>)
 800253c:	460c      	mov	r4, r1
 800253e:	6831      	ldr	r1, [r6, #0]
 8002540:	4605      	mov	r5, r0
 8002542:	b911      	cbnz	r1, 800254a <sbrk_aligned+0x12>
 8002544:	f000 fc50 	bl	8002de8 <_sbrk_r>
 8002548:	6030      	str	r0, [r6, #0]
 800254a:	4621      	mov	r1, r4
 800254c:	4628      	mov	r0, r5
 800254e:	f000 fc4b 	bl	8002de8 <_sbrk_r>
 8002552:	1c43      	adds	r3, r0, #1
 8002554:	d103      	bne.n	800255e <sbrk_aligned+0x26>
 8002556:	f04f 34ff 	mov.w	r4, #4294967295
 800255a:	4620      	mov	r0, r4
 800255c:	bd70      	pop	{r4, r5, r6, pc}
 800255e:	1cc4      	adds	r4, r0, #3
 8002560:	f024 0403 	bic.w	r4, r4, #3
 8002564:	42a0      	cmp	r0, r4
 8002566:	d0f8      	beq.n	800255a <sbrk_aligned+0x22>
 8002568:	1a21      	subs	r1, r4, r0
 800256a:	4628      	mov	r0, r5
 800256c:	f000 fc3c 	bl	8002de8 <_sbrk_r>
 8002570:	3001      	adds	r0, #1
 8002572:	d1f2      	bne.n	800255a <sbrk_aligned+0x22>
 8002574:	e7ef      	b.n	8002556 <sbrk_aligned+0x1e>
 8002576:	bf00      	nop
 8002578:	20000234 	.word	0x20000234

0800257c <_malloc_r>:
 800257c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002580:	1ccd      	adds	r5, r1, #3
 8002582:	f025 0503 	bic.w	r5, r5, #3
 8002586:	3508      	adds	r5, #8
 8002588:	2d0c      	cmp	r5, #12
 800258a:	bf38      	it	cc
 800258c:	250c      	movcc	r5, #12
 800258e:	2d00      	cmp	r5, #0
 8002590:	4606      	mov	r6, r0
 8002592:	db01      	blt.n	8002598 <_malloc_r+0x1c>
 8002594:	42a9      	cmp	r1, r5
 8002596:	d904      	bls.n	80025a2 <_malloc_r+0x26>
 8002598:	230c      	movs	r3, #12
 800259a:	6033      	str	r3, [r6, #0]
 800259c:	2000      	movs	r0, #0
 800259e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002678 <_malloc_r+0xfc>
 80025a6:	f000 f869 	bl	800267c <__malloc_lock>
 80025aa:	f8d8 3000 	ldr.w	r3, [r8]
 80025ae:	461c      	mov	r4, r3
 80025b0:	bb44      	cbnz	r4, 8002604 <_malloc_r+0x88>
 80025b2:	4629      	mov	r1, r5
 80025b4:	4630      	mov	r0, r6
 80025b6:	f7ff ffbf 	bl	8002538 <sbrk_aligned>
 80025ba:	1c43      	adds	r3, r0, #1
 80025bc:	4604      	mov	r4, r0
 80025be:	d158      	bne.n	8002672 <_malloc_r+0xf6>
 80025c0:	f8d8 4000 	ldr.w	r4, [r8]
 80025c4:	4627      	mov	r7, r4
 80025c6:	2f00      	cmp	r7, #0
 80025c8:	d143      	bne.n	8002652 <_malloc_r+0xd6>
 80025ca:	2c00      	cmp	r4, #0
 80025cc:	d04b      	beq.n	8002666 <_malloc_r+0xea>
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	4639      	mov	r1, r7
 80025d2:	4630      	mov	r0, r6
 80025d4:	eb04 0903 	add.w	r9, r4, r3
 80025d8:	f000 fc06 	bl	8002de8 <_sbrk_r>
 80025dc:	4581      	cmp	r9, r0
 80025de:	d142      	bne.n	8002666 <_malloc_r+0xea>
 80025e0:	6821      	ldr	r1, [r4, #0]
 80025e2:	1a6d      	subs	r5, r5, r1
 80025e4:	4629      	mov	r1, r5
 80025e6:	4630      	mov	r0, r6
 80025e8:	f7ff ffa6 	bl	8002538 <sbrk_aligned>
 80025ec:	3001      	adds	r0, #1
 80025ee:	d03a      	beq.n	8002666 <_malloc_r+0xea>
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	442b      	add	r3, r5
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	f8d8 3000 	ldr.w	r3, [r8]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	bb62      	cbnz	r2, 8002658 <_malloc_r+0xdc>
 80025fe:	f8c8 7000 	str.w	r7, [r8]
 8002602:	e00f      	b.n	8002624 <_malloc_r+0xa8>
 8002604:	6822      	ldr	r2, [r4, #0]
 8002606:	1b52      	subs	r2, r2, r5
 8002608:	d420      	bmi.n	800264c <_malloc_r+0xd0>
 800260a:	2a0b      	cmp	r2, #11
 800260c:	d917      	bls.n	800263e <_malloc_r+0xc2>
 800260e:	1961      	adds	r1, r4, r5
 8002610:	42a3      	cmp	r3, r4
 8002612:	6025      	str	r5, [r4, #0]
 8002614:	bf18      	it	ne
 8002616:	6059      	strne	r1, [r3, #4]
 8002618:	6863      	ldr	r3, [r4, #4]
 800261a:	bf08      	it	eq
 800261c:	f8c8 1000 	streq.w	r1, [r8]
 8002620:	5162      	str	r2, [r4, r5]
 8002622:	604b      	str	r3, [r1, #4]
 8002624:	4630      	mov	r0, r6
 8002626:	f000 f82f 	bl	8002688 <__malloc_unlock>
 800262a:	f104 000b 	add.w	r0, r4, #11
 800262e:	1d23      	adds	r3, r4, #4
 8002630:	f020 0007 	bic.w	r0, r0, #7
 8002634:	1ac2      	subs	r2, r0, r3
 8002636:	bf1c      	itt	ne
 8002638:	1a1b      	subne	r3, r3, r0
 800263a:	50a3      	strne	r3, [r4, r2]
 800263c:	e7af      	b.n	800259e <_malloc_r+0x22>
 800263e:	6862      	ldr	r2, [r4, #4]
 8002640:	42a3      	cmp	r3, r4
 8002642:	bf0c      	ite	eq
 8002644:	f8c8 2000 	streq.w	r2, [r8]
 8002648:	605a      	strne	r2, [r3, #4]
 800264a:	e7eb      	b.n	8002624 <_malloc_r+0xa8>
 800264c:	4623      	mov	r3, r4
 800264e:	6864      	ldr	r4, [r4, #4]
 8002650:	e7ae      	b.n	80025b0 <_malloc_r+0x34>
 8002652:	463c      	mov	r4, r7
 8002654:	687f      	ldr	r7, [r7, #4]
 8002656:	e7b6      	b.n	80025c6 <_malloc_r+0x4a>
 8002658:	461a      	mov	r2, r3
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	42a3      	cmp	r3, r4
 800265e:	d1fb      	bne.n	8002658 <_malloc_r+0xdc>
 8002660:	2300      	movs	r3, #0
 8002662:	6053      	str	r3, [r2, #4]
 8002664:	e7de      	b.n	8002624 <_malloc_r+0xa8>
 8002666:	230c      	movs	r3, #12
 8002668:	6033      	str	r3, [r6, #0]
 800266a:	4630      	mov	r0, r6
 800266c:	f000 f80c 	bl	8002688 <__malloc_unlock>
 8002670:	e794      	b.n	800259c <_malloc_r+0x20>
 8002672:	6005      	str	r5, [r0, #0]
 8002674:	e7d6      	b.n	8002624 <_malloc_r+0xa8>
 8002676:	bf00      	nop
 8002678:	20000238 	.word	0x20000238

0800267c <__malloc_lock>:
 800267c:	4801      	ldr	r0, [pc, #4]	@ (8002684 <__malloc_lock+0x8>)
 800267e:	f7ff bf0e 	b.w	800249e <__retarget_lock_acquire_recursive>
 8002682:	bf00      	nop
 8002684:	20000230 	.word	0x20000230

08002688 <__malloc_unlock>:
 8002688:	4801      	ldr	r0, [pc, #4]	@ (8002690 <__malloc_unlock+0x8>)
 800268a:	f7ff bf09 	b.w	80024a0 <__retarget_lock_release_recursive>
 800268e:	bf00      	nop
 8002690:	20000230 	.word	0x20000230

08002694 <__ssputs_r>:
 8002694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002698:	688e      	ldr	r6, [r1, #8]
 800269a:	461f      	mov	r7, r3
 800269c:	42be      	cmp	r6, r7
 800269e:	680b      	ldr	r3, [r1, #0]
 80026a0:	4682      	mov	sl, r0
 80026a2:	460c      	mov	r4, r1
 80026a4:	4690      	mov	r8, r2
 80026a6:	d82d      	bhi.n	8002704 <__ssputs_r+0x70>
 80026a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80026ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80026b0:	d026      	beq.n	8002700 <__ssputs_r+0x6c>
 80026b2:	6965      	ldr	r5, [r4, #20]
 80026b4:	6909      	ldr	r1, [r1, #16]
 80026b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026ba:	eba3 0901 	sub.w	r9, r3, r1
 80026be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80026c2:	1c7b      	adds	r3, r7, #1
 80026c4:	444b      	add	r3, r9
 80026c6:	106d      	asrs	r5, r5, #1
 80026c8:	429d      	cmp	r5, r3
 80026ca:	bf38      	it	cc
 80026cc:	461d      	movcc	r5, r3
 80026ce:	0553      	lsls	r3, r2, #21
 80026d0:	d527      	bpl.n	8002722 <__ssputs_r+0x8e>
 80026d2:	4629      	mov	r1, r5
 80026d4:	f7ff ff52 	bl	800257c <_malloc_r>
 80026d8:	4606      	mov	r6, r0
 80026da:	b360      	cbz	r0, 8002736 <__ssputs_r+0xa2>
 80026dc:	6921      	ldr	r1, [r4, #16]
 80026de:	464a      	mov	r2, r9
 80026e0:	f000 fb92 	bl	8002e08 <memcpy>
 80026e4:	89a3      	ldrh	r3, [r4, #12]
 80026e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80026ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ee:	81a3      	strh	r3, [r4, #12]
 80026f0:	6126      	str	r6, [r4, #16]
 80026f2:	6165      	str	r5, [r4, #20]
 80026f4:	444e      	add	r6, r9
 80026f6:	eba5 0509 	sub.w	r5, r5, r9
 80026fa:	6026      	str	r6, [r4, #0]
 80026fc:	60a5      	str	r5, [r4, #8]
 80026fe:	463e      	mov	r6, r7
 8002700:	42be      	cmp	r6, r7
 8002702:	d900      	bls.n	8002706 <__ssputs_r+0x72>
 8002704:	463e      	mov	r6, r7
 8002706:	6820      	ldr	r0, [r4, #0]
 8002708:	4632      	mov	r2, r6
 800270a:	4641      	mov	r1, r8
 800270c:	f000 fb52 	bl	8002db4 <memmove>
 8002710:	68a3      	ldr	r3, [r4, #8]
 8002712:	1b9b      	subs	r3, r3, r6
 8002714:	60a3      	str	r3, [r4, #8]
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	4433      	add	r3, r6
 800271a:	6023      	str	r3, [r4, #0]
 800271c:	2000      	movs	r0, #0
 800271e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002722:	462a      	mov	r2, r5
 8002724:	f000 fb7e 	bl	8002e24 <_realloc_r>
 8002728:	4606      	mov	r6, r0
 800272a:	2800      	cmp	r0, #0
 800272c:	d1e0      	bne.n	80026f0 <__ssputs_r+0x5c>
 800272e:	6921      	ldr	r1, [r4, #16]
 8002730:	4650      	mov	r0, sl
 8002732:	f7ff feb7 	bl	80024a4 <_free_r>
 8002736:	230c      	movs	r3, #12
 8002738:	f8ca 3000 	str.w	r3, [sl]
 800273c:	89a3      	ldrh	r3, [r4, #12]
 800273e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002742:	81a3      	strh	r3, [r4, #12]
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	e7e9      	b.n	800271e <__ssputs_r+0x8a>
	...

0800274c <_svfiprintf_r>:
 800274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002750:	4698      	mov	r8, r3
 8002752:	898b      	ldrh	r3, [r1, #12]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	b09d      	sub	sp, #116	@ 0x74
 8002758:	4607      	mov	r7, r0
 800275a:	460d      	mov	r5, r1
 800275c:	4614      	mov	r4, r2
 800275e:	d510      	bpl.n	8002782 <_svfiprintf_r+0x36>
 8002760:	690b      	ldr	r3, [r1, #16]
 8002762:	b973      	cbnz	r3, 8002782 <_svfiprintf_r+0x36>
 8002764:	2140      	movs	r1, #64	@ 0x40
 8002766:	f7ff ff09 	bl	800257c <_malloc_r>
 800276a:	6028      	str	r0, [r5, #0]
 800276c:	6128      	str	r0, [r5, #16]
 800276e:	b930      	cbnz	r0, 800277e <_svfiprintf_r+0x32>
 8002770:	230c      	movs	r3, #12
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	b01d      	add	sp, #116	@ 0x74
 800277a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800277e:	2340      	movs	r3, #64	@ 0x40
 8002780:	616b      	str	r3, [r5, #20]
 8002782:	2300      	movs	r3, #0
 8002784:	9309      	str	r3, [sp, #36]	@ 0x24
 8002786:	2320      	movs	r3, #32
 8002788:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800278c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002790:	2330      	movs	r3, #48	@ 0x30
 8002792:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002930 <_svfiprintf_r+0x1e4>
 8002796:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800279a:	f04f 0901 	mov.w	r9, #1
 800279e:	4623      	mov	r3, r4
 80027a0:	469a      	mov	sl, r3
 80027a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027a6:	b10a      	cbz	r2, 80027ac <_svfiprintf_r+0x60>
 80027a8:	2a25      	cmp	r2, #37	@ 0x25
 80027aa:	d1f9      	bne.n	80027a0 <_svfiprintf_r+0x54>
 80027ac:	ebba 0b04 	subs.w	fp, sl, r4
 80027b0:	d00b      	beq.n	80027ca <_svfiprintf_r+0x7e>
 80027b2:	465b      	mov	r3, fp
 80027b4:	4622      	mov	r2, r4
 80027b6:	4629      	mov	r1, r5
 80027b8:	4638      	mov	r0, r7
 80027ba:	f7ff ff6b 	bl	8002694 <__ssputs_r>
 80027be:	3001      	adds	r0, #1
 80027c0:	f000 80a7 	beq.w	8002912 <_svfiprintf_r+0x1c6>
 80027c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80027c6:	445a      	add	r2, fp
 80027c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80027ca:	f89a 3000 	ldrb.w	r3, [sl]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 809f 	beq.w	8002912 <_svfiprintf_r+0x1c6>
 80027d4:	2300      	movs	r3, #0
 80027d6:	f04f 32ff 	mov.w	r2, #4294967295
 80027da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027de:	f10a 0a01 	add.w	sl, sl, #1
 80027e2:	9304      	str	r3, [sp, #16]
 80027e4:	9307      	str	r3, [sp, #28]
 80027e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80027ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80027ec:	4654      	mov	r4, sl
 80027ee:	2205      	movs	r2, #5
 80027f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027f4:	484e      	ldr	r0, [pc, #312]	@ (8002930 <_svfiprintf_r+0x1e4>)
 80027f6:	f7fd fceb 	bl	80001d0 <memchr>
 80027fa:	9a04      	ldr	r2, [sp, #16]
 80027fc:	b9d8      	cbnz	r0, 8002836 <_svfiprintf_r+0xea>
 80027fe:	06d0      	lsls	r0, r2, #27
 8002800:	bf44      	itt	mi
 8002802:	2320      	movmi	r3, #32
 8002804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002808:	0711      	lsls	r1, r2, #28
 800280a:	bf44      	itt	mi
 800280c:	232b      	movmi	r3, #43	@ 0x2b
 800280e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002812:	f89a 3000 	ldrb.w	r3, [sl]
 8002816:	2b2a      	cmp	r3, #42	@ 0x2a
 8002818:	d015      	beq.n	8002846 <_svfiprintf_r+0xfa>
 800281a:	9a07      	ldr	r2, [sp, #28]
 800281c:	4654      	mov	r4, sl
 800281e:	2000      	movs	r0, #0
 8002820:	f04f 0c0a 	mov.w	ip, #10
 8002824:	4621      	mov	r1, r4
 8002826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800282a:	3b30      	subs	r3, #48	@ 0x30
 800282c:	2b09      	cmp	r3, #9
 800282e:	d94b      	bls.n	80028c8 <_svfiprintf_r+0x17c>
 8002830:	b1b0      	cbz	r0, 8002860 <_svfiprintf_r+0x114>
 8002832:	9207      	str	r2, [sp, #28]
 8002834:	e014      	b.n	8002860 <_svfiprintf_r+0x114>
 8002836:	eba0 0308 	sub.w	r3, r0, r8
 800283a:	fa09 f303 	lsl.w	r3, r9, r3
 800283e:	4313      	orrs	r3, r2
 8002840:	9304      	str	r3, [sp, #16]
 8002842:	46a2      	mov	sl, r4
 8002844:	e7d2      	b.n	80027ec <_svfiprintf_r+0xa0>
 8002846:	9b03      	ldr	r3, [sp, #12]
 8002848:	1d19      	adds	r1, r3, #4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	9103      	str	r1, [sp, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	bfbb      	ittet	lt
 8002852:	425b      	neglt	r3, r3
 8002854:	f042 0202 	orrlt.w	r2, r2, #2
 8002858:	9307      	strge	r3, [sp, #28]
 800285a:	9307      	strlt	r3, [sp, #28]
 800285c:	bfb8      	it	lt
 800285e:	9204      	strlt	r2, [sp, #16]
 8002860:	7823      	ldrb	r3, [r4, #0]
 8002862:	2b2e      	cmp	r3, #46	@ 0x2e
 8002864:	d10a      	bne.n	800287c <_svfiprintf_r+0x130>
 8002866:	7863      	ldrb	r3, [r4, #1]
 8002868:	2b2a      	cmp	r3, #42	@ 0x2a
 800286a:	d132      	bne.n	80028d2 <_svfiprintf_r+0x186>
 800286c:	9b03      	ldr	r3, [sp, #12]
 800286e:	1d1a      	adds	r2, r3, #4
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	9203      	str	r2, [sp, #12]
 8002874:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002878:	3402      	adds	r4, #2
 800287a:	9305      	str	r3, [sp, #20]
 800287c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002940 <_svfiprintf_r+0x1f4>
 8002880:	7821      	ldrb	r1, [r4, #0]
 8002882:	2203      	movs	r2, #3
 8002884:	4650      	mov	r0, sl
 8002886:	f7fd fca3 	bl	80001d0 <memchr>
 800288a:	b138      	cbz	r0, 800289c <_svfiprintf_r+0x150>
 800288c:	9b04      	ldr	r3, [sp, #16]
 800288e:	eba0 000a 	sub.w	r0, r0, sl
 8002892:	2240      	movs	r2, #64	@ 0x40
 8002894:	4082      	lsls	r2, r0
 8002896:	4313      	orrs	r3, r2
 8002898:	3401      	adds	r4, #1
 800289a:	9304      	str	r3, [sp, #16]
 800289c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028a0:	4824      	ldr	r0, [pc, #144]	@ (8002934 <_svfiprintf_r+0x1e8>)
 80028a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80028a6:	2206      	movs	r2, #6
 80028a8:	f7fd fc92 	bl	80001d0 <memchr>
 80028ac:	2800      	cmp	r0, #0
 80028ae:	d036      	beq.n	800291e <_svfiprintf_r+0x1d2>
 80028b0:	4b21      	ldr	r3, [pc, #132]	@ (8002938 <_svfiprintf_r+0x1ec>)
 80028b2:	bb1b      	cbnz	r3, 80028fc <_svfiprintf_r+0x1b0>
 80028b4:	9b03      	ldr	r3, [sp, #12]
 80028b6:	3307      	adds	r3, #7
 80028b8:	f023 0307 	bic.w	r3, r3, #7
 80028bc:	3308      	adds	r3, #8
 80028be:	9303      	str	r3, [sp, #12]
 80028c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80028c2:	4433      	add	r3, r6
 80028c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80028c6:	e76a      	b.n	800279e <_svfiprintf_r+0x52>
 80028c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80028cc:	460c      	mov	r4, r1
 80028ce:	2001      	movs	r0, #1
 80028d0:	e7a8      	b.n	8002824 <_svfiprintf_r+0xd8>
 80028d2:	2300      	movs	r3, #0
 80028d4:	3401      	adds	r4, #1
 80028d6:	9305      	str	r3, [sp, #20]
 80028d8:	4619      	mov	r1, r3
 80028da:	f04f 0c0a 	mov.w	ip, #10
 80028de:	4620      	mov	r0, r4
 80028e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028e4:	3a30      	subs	r2, #48	@ 0x30
 80028e6:	2a09      	cmp	r2, #9
 80028e8:	d903      	bls.n	80028f2 <_svfiprintf_r+0x1a6>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0c6      	beq.n	800287c <_svfiprintf_r+0x130>
 80028ee:	9105      	str	r1, [sp, #20]
 80028f0:	e7c4      	b.n	800287c <_svfiprintf_r+0x130>
 80028f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80028f6:	4604      	mov	r4, r0
 80028f8:	2301      	movs	r3, #1
 80028fa:	e7f0      	b.n	80028de <_svfiprintf_r+0x192>
 80028fc:	ab03      	add	r3, sp, #12
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	462a      	mov	r2, r5
 8002902:	4b0e      	ldr	r3, [pc, #56]	@ (800293c <_svfiprintf_r+0x1f0>)
 8002904:	a904      	add	r1, sp, #16
 8002906:	4638      	mov	r0, r7
 8002908:	f3af 8000 	nop.w
 800290c:	1c42      	adds	r2, r0, #1
 800290e:	4606      	mov	r6, r0
 8002910:	d1d6      	bne.n	80028c0 <_svfiprintf_r+0x174>
 8002912:	89ab      	ldrh	r3, [r5, #12]
 8002914:	065b      	lsls	r3, r3, #25
 8002916:	f53f af2d 	bmi.w	8002774 <_svfiprintf_r+0x28>
 800291a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800291c:	e72c      	b.n	8002778 <_svfiprintf_r+0x2c>
 800291e:	ab03      	add	r3, sp, #12
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	462a      	mov	r2, r5
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <_svfiprintf_r+0x1f0>)
 8002926:	a904      	add	r1, sp, #16
 8002928:	4638      	mov	r0, r7
 800292a:	f000 f879 	bl	8002a20 <_printf_i>
 800292e:	e7ed      	b.n	800290c <_svfiprintf_r+0x1c0>
 8002930:	080033e8 	.word	0x080033e8
 8002934:	080033f2 	.word	0x080033f2
 8002938:	00000000 	.word	0x00000000
 800293c:	08002695 	.word	0x08002695
 8002940:	080033ee 	.word	0x080033ee

08002944 <_printf_common>:
 8002944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002948:	4616      	mov	r6, r2
 800294a:	4698      	mov	r8, r3
 800294c:	688a      	ldr	r2, [r1, #8]
 800294e:	690b      	ldr	r3, [r1, #16]
 8002950:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002954:	4293      	cmp	r3, r2
 8002956:	bfb8      	it	lt
 8002958:	4613      	movlt	r3, r2
 800295a:	6033      	str	r3, [r6, #0]
 800295c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002960:	4607      	mov	r7, r0
 8002962:	460c      	mov	r4, r1
 8002964:	b10a      	cbz	r2, 800296a <_printf_common+0x26>
 8002966:	3301      	adds	r3, #1
 8002968:	6033      	str	r3, [r6, #0]
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	0699      	lsls	r1, r3, #26
 800296e:	bf42      	ittt	mi
 8002970:	6833      	ldrmi	r3, [r6, #0]
 8002972:	3302      	addmi	r3, #2
 8002974:	6033      	strmi	r3, [r6, #0]
 8002976:	6825      	ldr	r5, [r4, #0]
 8002978:	f015 0506 	ands.w	r5, r5, #6
 800297c:	d106      	bne.n	800298c <_printf_common+0x48>
 800297e:	f104 0a19 	add.w	sl, r4, #25
 8002982:	68e3      	ldr	r3, [r4, #12]
 8002984:	6832      	ldr	r2, [r6, #0]
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	42ab      	cmp	r3, r5
 800298a:	dc26      	bgt.n	80029da <_printf_common+0x96>
 800298c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002990:	6822      	ldr	r2, [r4, #0]
 8002992:	3b00      	subs	r3, #0
 8002994:	bf18      	it	ne
 8002996:	2301      	movne	r3, #1
 8002998:	0692      	lsls	r2, r2, #26
 800299a:	d42b      	bmi.n	80029f4 <_printf_common+0xb0>
 800299c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80029a0:	4641      	mov	r1, r8
 80029a2:	4638      	mov	r0, r7
 80029a4:	47c8      	blx	r9
 80029a6:	3001      	adds	r0, #1
 80029a8:	d01e      	beq.n	80029e8 <_printf_common+0xa4>
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	6922      	ldr	r2, [r4, #16]
 80029ae:	f003 0306 	and.w	r3, r3, #6
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf02      	ittt	eq
 80029b6:	68e5      	ldreq	r5, [r4, #12]
 80029b8:	6833      	ldreq	r3, [r6, #0]
 80029ba:	1aed      	subeq	r5, r5, r3
 80029bc:	68a3      	ldr	r3, [r4, #8]
 80029be:	bf0c      	ite	eq
 80029c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029c4:	2500      	movne	r5, #0
 80029c6:	4293      	cmp	r3, r2
 80029c8:	bfc4      	itt	gt
 80029ca:	1a9b      	subgt	r3, r3, r2
 80029cc:	18ed      	addgt	r5, r5, r3
 80029ce:	2600      	movs	r6, #0
 80029d0:	341a      	adds	r4, #26
 80029d2:	42b5      	cmp	r5, r6
 80029d4:	d11a      	bne.n	8002a0c <_printf_common+0xc8>
 80029d6:	2000      	movs	r0, #0
 80029d8:	e008      	b.n	80029ec <_printf_common+0xa8>
 80029da:	2301      	movs	r3, #1
 80029dc:	4652      	mov	r2, sl
 80029de:	4641      	mov	r1, r8
 80029e0:	4638      	mov	r0, r7
 80029e2:	47c8      	blx	r9
 80029e4:	3001      	adds	r0, #1
 80029e6:	d103      	bne.n	80029f0 <_printf_common+0xac>
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029f0:	3501      	adds	r5, #1
 80029f2:	e7c6      	b.n	8002982 <_printf_common+0x3e>
 80029f4:	18e1      	adds	r1, r4, r3
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	2030      	movs	r0, #48	@ 0x30
 80029fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80029fe:	4422      	add	r2, r4
 8002a00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002a04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002a08:	3302      	adds	r3, #2
 8002a0a:	e7c7      	b.n	800299c <_printf_common+0x58>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	4622      	mov	r2, r4
 8002a10:	4641      	mov	r1, r8
 8002a12:	4638      	mov	r0, r7
 8002a14:	47c8      	blx	r9
 8002a16:	3001      	adds	r0, #1
 8002a18:	d0e6      	beq.n	80029e8 <_printf_common+0xa4>
 8002a1a:	3601      	adds	r6, #1
 8002a1c:	e7d9      	b.n	80029d2 <_printf_common+0x8e>
	...

08002a20 <_printf_i>:
 8002a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a24:	7e0f      	ldrb	r7, [r1, #24]
 8002a26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002a28:	2f78      	cmp	r7, #120	@ 0x78
 8002a2a:	4691      	mov	r9, r2
 8002a2c:	4680      	mov	r8, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	469a      	mov	sl, r3
 8002a32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002a36:	d807      	bhi.n	8002a48 <_printf_i+0x28>
 8002a38:	2f62      	cmp	r7, #98	@ 0x62
 8002a3a:	d80a      	bhi.n	8002a52 <_printf_i+0x32>
 8002a3c:	2f00      	cmp	r7, #0
 8002a3e:	f000 80d1 	beq.w	8002be4 <_printf_i+0x1c4>
 8002a42:	2f58      	cmp	r7, #88	@ 0x58
 8002a44:	f000 80b8 	beq.w	8002bb8 <_printf_i+0x198>
 8002a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002a50:	e03a      	b.n	8002ac8 <_printf_i+0xa8>
 8002a52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002a56:	2b15      	cmp	r3, #21
 8002a58:	d8f6      	bhi.n	8002a48 <_printf_i+0x28>
 8002a5a:	a101      	add	r1, pc, #4	@ (adr r1, 8002a60 <_printf_i+0x40>)
 8002a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a60:	08002ab9 	.word	0x08002ab9
 8002a64:	08002acd 	.word	0x08002acd
 8002a68:	08002a49 	.word	0x08002a49
 8002a6c:	08002a49 	.word	0x08002a49
 8002a70:	08002a49 	.word	0x08002a49
 8002a74:	08002a49 	.word	0x08002a49
 8002a78:	08002acd 	.word	0x08002acd
 8002a7c:	08002a49 	.word	0x08002a49
 8002a80:	08002a49 	.word	0x08002a49
 8002a84:	08002a49 	.word	0x08002a49
 8002a88:	08002a49 	.word	0x08002a49
 8002a8c:	08002bcb 	.word	0x08002bcb
 8002a90:	08002af7 	.word	0x08002af7
 8002a94:	08002b85 	.word	0x08002b85
 8002a98:	08002a49 	.word	0x08002a49
 8002a9c:	08002a49 	.word	0x08002a49
 8002aa0:	08002bed 	.word	0x08002bed
 8002aa4:	08002a49 	.word	0x08002a49
 8002aa8:	08002af7 	.word	0x08002af7
 8002aac:	08002a49 	.word	0x08002a49
 8002ab0:	08002a49 	.word	0x08002a49
 8002ab4:	08002b8d 	.word	0x08002b8d
 8002ab8:	6833      	ldr	r3, [r6, #0]
 8002aba:	1d1a      	adds	r2, r3, #4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6032      	str	r2, [r6, #0]
 8002ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ac4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e09c      	b.n	8002c06 <_printf_i+0x1e6>
 8002acc:	6833      	ldr	r3, [r6, #0]
 8002ace:	6820      	ldr	r0, [r4, #0]
 8002ad0:	1d19      	adds	r1, r3, #4
 8002ad2:	6031      	str	r1, [r6, #0]
 8002ad4:	0606      	lsls	r6, r0, #24
 8002ad6:	d501      	bpl.n	8002adc <_printf_i+0xbc>
 8002ad8:	681d      	ldr	r5, [r3, #0]
 8002ada:	e003      	b.n	8002ae4 <_printf_i+0xc4>
 8002adc:	0645      	lsls	r5, r0, #25
 8002ade:	d5fb      	bpl.n	8002ad8 <_printf_i+0xb8>
 8002ae0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002ae4:	2d00      	cmp	r5, #0
 8002ae6:	da03      	bge.n	8002af0 <_printf_i+0xd0>
 8002ae8:	232d      	movs	r3, #45	@ 0x2d
 8002aea:	426d      	negs	r5, r5
 8002aec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002af0:	4858      	ldr	r0, [pc, #352]	@ (8002c54 <_printf_i+0x234>)
 8002af2:	230a      	movs	r3, #10
 8002af4:	e011      	b.n	8002b1a <_printf_i+0xfa>
 8002af6:	6821      	ldr	r1, [r4, #0]
 8002af8:	6833      	ldr	r3, [r6, #0]
 8002afa:	0608      	lsls	r0, r1, #24
 8002afc:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b00:	d402      	bmi.n	8002b08 <_printf_i+0xe8>
 8002b02:	0649      	lsls	r1, r1, #25
 8002b04:	bf48      	it	mi
 8002b06:	b2ad      	uxthmi	r5, r5
 8002b08:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b0a:	4852      	ldr	r0, [pc, #328]	@ (8002c54 <_printf_i+0x234>)
 8002b0c:	6033      	str	r3, [r6, #0]
 8002b0e:	bf14      	ite	ne
 8002b10:	230a      	movne	r3, #10
 8002b12:	2308      	moveq	r3, #8
 8002b14:	2100      	movs	r1, #0
 8002b16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002b1a:	6866      	ldr	r6, [r4, #4]
 8002b1c:	60a6      	str	r6, [r4, #8]
 8002b1e:	2e00      	cmp	r6, #0
 8002b20:	db05      	blt.n	8002b2e <_printf_i+0x10e>
 8002b22:	6821      	ldr	r1, [r4, #0]
 8002b24:	432e      	orrs	r6, r5
 8002b26:	f021 0104 	bic.w	r1, r1, #4
 8002b2a:	6021      	str	r1, [r4, #0]
 8002b2c:	d04b      	beq.n	8002bc6 <_printf_i+0x1a6>
 8002b2e:	4616      	mov	r6, r2
 8002b30:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b34:	fb03 5711 	mls	r7, r3, r1, r5
 8002b38:	5dc7      	ldrb	r7, [r0, r7]
 8002b3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b3e:	462f      	mov	r7, r5
 8002b40:	42bb      	cmp	r3, r7
 8002b42:	460d      	mov	r5, r1
 8002b44:	d9f4      	bls.n	8002b30 <_printf_i+0x110>
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d10b      	bne.n	8002b62 <_printf_i+0x142>
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	07df      	lsls	r7, r3, #31
 8002b4e:	d508      	bpl.n	8002b62 <_printf_i+0x142>
 8002b50:	6923      	ldr	r3, [r4, #16]
 8002b52:	6861      	ldr	r1, [r4, #4]
 8002b54:	4299      	cmp	r1, r3
 8002b56:	bfde      	ittt	le
 8002b58:	2330      	movle	r3, #48	@ 0x30
 8002b5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002b62:	1b92      	subs	r2, r2, r6
 8002b64:	6122      	str	r2, [r4, #16]
 8002b66:	f8cd a000 	str.w	sl, [sp]
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	aa03      	add	r2, sp, #12
 8002b6e:	4621      	mov	r1, r4
 8002b70:	4640      	mov	r0, r8
 8002b72:	f7ff fee7 	bl	8002944 <_printf_common>
 8002b76:	3001      	adds	r0, #1
 8002b78:	d14a      	bne.n	8002c10 <_printf_i+0x1f0>
 8002b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7e:	b004      	add	sp, #16
 8002b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	f043 0320 	orr.w	r3, r3, #32
 8002b8a:	6023      	str	r3, [r4, #0]
 8002b8c:	4832      	ldr	r0, [pc, #200]	@ (8002c58 <_printf_i+0x238>)
 8002b8e:	2778      	movs	r7, #120	@ 0x78
 8002b90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	6831      	ldr	r1, [r6, #0]
 8002b98:	061f      	lsls	r7, r3, #24
 8002b9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b9e:	d402      	bmi.n	8002ba6 <_printf_i+0x186>
 8002ba0:	065f      	lsls	r7, r3, #25
 8002ba2:	bf48      	it	mi
 8002ba4:	b2ad      	uxthmi	r5, r5
 8002ba6:	6031      	str	r1, [r6, #0]
 8002ba8:	07d9      	lsls	r1, r3, #31
 8002baa:	bf44      	itt	mi
 8002bac:	f043 0320 	orrmi.w	r3, r3, #32
 8002bb0:	6023      	strmi	r3, [r4, #0]
 8002bb2:	b11d      	cbz	r5, 8002bbc <_printf_i+0x19c>
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	e7ad      	b.n	8002b14 <_printf_i+0xf4>
 8002bb8:	4826      	ldr	r0, [pc, #152]	@ (8002c54 <_printf_i+0x234>)
 8002bba:	e7e9      	b.n	8002b90 <_printf_i+0x170>
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	f023 0320 	bic.w	r3, r3, #32
 8002bc2:	6023      	str	r3, [r4, #0]
 8002bc4:	e7f6      	b.n	8002bb4 <_printf_i+0x194>
 8002bc6:	4616      	mov	r6, r2
 8002bc8:	e7bd      	b.n	8002b46 <_printf_i+0x126>
 8002bca:	6833      	ldr	r3, [r6, #0]
 8002bcc:	6825      	ldr	r5, [r4, #0]
 8002bce:	6961      	ldr	r1, [r4, #20]
 8002bd0:	1d18      	adds	r0, r3, #4
 8002bd2:	6030      	str	r0, [r6, #0]
 8002bd4:	062e      	lsls	r6, r5, #24
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	d501      	bpl.n	8002bde <_printf_i+0x1be>
 8002bda:	6019      	str	r1, [r3, #0]
 8002bdc:	e002      	b.n	8002be4 <_printf_i+0x1c4>
 8002bde:	0668      	lsls	r0, r5, #25
 8002be0:	d5fb      	bpl.n	8002bda <_printf_i+0x1ba>
 8002be2:	8019      	strh	r1, [r3, #0]
 8002be4:	2300      	movs	r3, #0
 8002be6:	6123      	str	r3, [r4, #16]
 8002be8:	4616      	mov	r6, r2
 8002bea:	e7bc      	b.n	8002b66 <_printf_i+0x146>
 8002bec:	6833      	ldr	r3, [r6, #0]
 8002bee:	1d1a      	adds	r2, r3, #4
 8002bf0:	6032      	str	r2, [r6, #0]
 8002bf2:	681e      	ldr	r6, [r3, #0]
 8002bf4:	6862      	ldr	r2, [r4, #4]
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4630      	mov	r0, r6
 8002bfa:	f7fd fae9 	bl	80001d0 <memchr>
 8002bfe:	b108      	cbz	r0, 8002c04 <_printf_i+0x1e4>
 8002c00:	1b80      	subs	r0, r0, r6
 8002c02:	6060      	str	r0, [r4, #4]
 8002c04:	6863      	ldr	r3, [r4, #4]
 8002c06:	6123      	str	r3, [r4, #16]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c0e:	e7aa      	b.n	8002b66 <_printf_i+0x146>
 8002c10:	6923      	ldr	r3, [r4, #16]
 8002c12:	4632      	mov	r2, r6
 8002c14:	4649      	mov	r1, r9
 8002c16:	4640      	mov	r0, r8
 8002c18:	47d0      	blx	sl
 8002c1a:	3001      	adds	r0, #1
 8002c1c:	d0ad      	beq.n	8002b7a <_printf_i+0x15a>
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	079b      	lsls	r3, r3, #30
 8002c22:	d413      	bmi.n	8002c4c <_printf_i+0x22c>
 8002c24:	68e0      	ldr	r0, [r4, #12]
 8002c26:	9b03      	ldr	r3, [sp, #12]
 8002c28:	4298      	cmp	r0, r3
 8002c2a:	bfb8      	it	lt
 8002c2c:	4618      	movlt	r0, r3
 8002c2e:	e7a6      	b.n	8002b7e <_printf_i+0x15e>
 8002c30:	2301      	movs	r3, #1
 8002c32:	4632      	mov	r2, r6
 8002c34:	4649      	mov	r1, r9
 8002c36:	4640      	mov	r0, r8
 8002c38:	47d0      	blx	sl
 8002c3a:	3001      	adds	r0, #1
 8002c3c:	d09d      	beq.n	8002b7a <_printf_i+0x15a>
 8002c3e:	3501      	adds	r5, #1
 8002c40:	68e3      	ldr	r3, [r4, #12]
 8002c42:	9903      	ldr	r1, [sp, #12]
 8002c44:	1a5b      	subs	r3, r3, r1
 8002c46:	42ab      	cmp	r3, r5
 8002c48:	dcf2      	bgt.n	8002c30 <_printf_i+0x210>
 8002c4a:	e7eb      	b.n	8002c24 <_printf_i+0x204>
 8002c4c:	2500      	movs	r5, #0
 8002c4e:	f104 0619 	add.w	r6, r4, #25
 8002c52:	e7f5      	b.n	8002c40 <_printf_i+0x220>
 8002c54:	080033f9 	.word	0x080033f9
 8002c58:	0800340a 	.word	0x0800340a

08002c5c <__sflush_r>:
 8002c5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c64:	0716      	lsls	r6, r2, #28
 8002c66:	4605      	mov	r5, r0
 8002c68:	460c      	mov	r4, r1
 8002c6a:	d454      	bmi.n	8002d16 <__sflush_r+0xba>
 8002c6c:	684b      	ldr	r3, [r1, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	dc02      	bgt.n	8002c78 <__sflush_r+0x1c>
 8002c72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	dd48      	ble.n	8002d0a <__sflush_r+0xae>
 8002c78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c7a:	2e00      	cmp	r6, #0
 8002c7c:	d045      	beq.n	8002d0a <__sflush_r+0xae>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002c84:	682f      	ldr	r7, [r5, #0]
 8002c86:	6a21      	ldr	r1, [r4, #32]
 8002c88:	602b      	str	r3, [r5, #0]
 8002c8a:	d030      	beq.n	8002cee <__sflush_r+0x92>
 8002c8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002c8e:	89a3      	ldrh	r3, [r4, #12]
 8002c90:	0759      	lsls	r1, r3, #29
 8002c92:	d505      	bpl.n	8002ca0 <__sflush_r+0x44>
 8002c94:	6863      	ldr	r3, [r4, #4]
 8002c96:	1ad2      	subs	r2, r2, r3
 8002c98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c9a:	b10b      	cbz	r3, 8002ca0 <__sflush_r+0x44>
 8002c9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ca4:	6a21      	ldr	r1, [r4, #32]
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	47b0      	blx	r6
 8002caa:	1c43      	adds	r3, r0, #1
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	d106      	bne.n	8002cbe <__sflush_r+0x62>
 8002cb0:	6829      	ldr	r1, [r5, #0]
 8002cb2:	291d      	cmp	r1, #29
 8002cb4:	d82b      	bhi.n	8002d0e <__sflush_r+0xb2>
 8002cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8002d60 <__sflush_r+0x104>)
 8002cb8:	40ca      	lsrs	r2, r1
 8002cba:	07d6      	lsls	r6, r2, #31
 8002cbc:	d527      	bpl.n	8002d0e <__sflush_r+0xb2>
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	6062      	str	r2, [r4, #4]
 8002cc2:	04d9      	lsls	r1, r3, #19
 8002cc4:	6922      	ldr	r2, [r4, #16]
 8002cc6:	6022      	str	r2, [r4, #0]
 8002cc8:	d504      	bpl.n	8002cd4 <__sflush_r+0x78>
 8002cca:	1c42      	adds	r2, r0, #1
 8002ccc:	d101      	bne.n	8002cd2 <__sflush_r+0x76>
 8002cce:	682b      	ldr	r3, [r5, #0]
 8002cd0:	b903      	cbnz	r3, 8002cd4 <__sflush_r+0x78>
 8002cd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8002cd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002cd6:	602f      	str	r7, [r5, #0]
 8002cd8:	b1b9      	cbz	r1, 8002d0a <__sflush_r+0xae>
 8002cda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002cde:	4299      	cmp	r1, r3
 8002ce0:	d002      	beq.n	8002ce8 <__sflush_r+0x8c>
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f7ff fbde 	bl	80024a4 <_free_r>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	6363      	str	r3, [r4, #52]	@ 0x34
 8002cec:	e00d      	b.n	8002d0a <__sflush_r+0xae>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	47b0      	blx	r6
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	1c50      	adds	r0, r2, #1
 8002cf8:	d1c9      	bne.n	8002c8e <__sflush_r+0x32>
 8002cfa:	682b      	ldr	r3, [r5, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0c6      	beq.n	8002c8e <__sflush_r+0x32>
 8002d00:	2b1d      	cmp	r3, #29
 8002d02:	d001      	beq.n	8002d08 <__sflush_r+0xac>
 8002d04:	2b16      	cmp	r3, #22
 8002d06:	d11e      	bne.n	8002d46 <__sflush_r+0xea>
 8002d08:	602f      	str	r7, [r5, #0]
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	e022      	b.n	8002d54 <__sflush_r+0xf8>
 8002d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d12:	b21b      	sxth	r3, r3
 8002d14:	e01b      	b.n	8002d4e <__sflush_r+0xf2>
 8002d16:	690f      	ldr	r7, [r1, #16]
 8002d18:	2f00      	cmp	r7, #0
 8002d1a:	d0f6      	beq.n	8002d0a <__sflush_r+0xae>
 8002d1c:	0793      	lsls	r3, r2, #30
 8002d1e:	680e      	ldr	r6, [r1, #0]
 8002d20:	bf08      	it	eq
 8002d22:	694b      	ldreq	r3, [r1, #20]
 8002d24:	600f      	str	r7, [r1, #0]
 8002d26:	bf18      	it	ne
 8002d28:	2300      	movne	r3, #0
 8002d2a:	eba6 0807 	sub.w	r8, r6, r7
 8002d2e:	608b      	str	r3, [r1, #8]
 8002d30:	f1b8 0f00 	cmp.w	r8, #0
 8002d34:	dde9      	ble.n	8002d0a <__sflush_r+0xae>
 8002d36:	6a21      	ldr	r1, [r4, #32]
 8002d38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002d3a:	4643      	mov	r3, r8
 8002d3c:	463a      	mov	r2, r7
 8002d3e:	4628      	mov	r0, r5
 8002d40:	47b0      	blx	r6
 8002d42:	2800      	cmp	r0, #0
 8002d44:	dc08      	bgt.n	8002d58 <__sflush_r+0xfc>
 8002d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d4e:	81a3      	strh	r3, [r4, #12]
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d58:	4407      	add	r7, r0
 8002d5a:	eba8 0800 	sub.w	r8, r8, r0
 8002d5e:	e7e7      	b.n	8002d30 <__sflush_r+0xd4>
 8002d60:	20400001 	.word	0x20400001

08002d64 <_fflush_r>:
 8002d64:	b538      	push	{r3, r4, r5, lr}
 8002d66:	690b      	ldr	r3, [r1, #16]
 8002d68:	4605      	mov	r5, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	b913      	cbnz	r3, 8002d74 <_fflush_r+0x10>
 8002d6e:	2500      	movs	r5, #0
 8002d70:	4628      	mov	r0, r5
 8002d72:	bd38      	pop	{r3, r4, r5, pc}
 8002d74:	b118      	cbz	r0, 8002d7e <_fflush_r+0x1a>
 8002d76:	6a03      	ldr	r3, [r0, #32]
 8002d78:	b90b      	cbnz	r3, 8002d7e <_fflush_r+0x1a>
 8002d7a:	f7ff fa7b 	bl	8002274 <__sinit>
 8002d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f3      	beq.n	8002d6e <_fflush_r+0xa>
 8002d86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002d88:	07d0      	lsls	r0, r2, #31
 8002d8a:	d404      	bmi.n	8002d96 <_fflush_r+0x32>
 8002d8c:	0599      	lsls	r1, r3, #22
 8002d8e:	d402      	bmi.n	8002d96 <_fflush_r+0x32>
 8002d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d92:	f7ff fb84 	bl	800249e <__retarget_lock_acquire_recursive>
 8002d96:	4628      	mov	r0, r5
 8002d98:	4621      	mov	r1, r4
 8002d9a:	f7ff ff5f 	bl	8002c5c <__sflush_r>
 8002d9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002da0:	07da      	lsls	r2, r3, #31
 8002da2:	4605      	mov	r5, r0
 8002da4:	d4e4      	bmi.n	8002d70 <_fflush_r+0xc>
 8002da6:	89a3      	ldrh	r3, [r4, #12]
 8002da8:	059b      	lsls	r3, r3, #22
 8002daa:	d4e1      	bmi.n	8002d70 <_fflush_r+0xc>
 8002dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dae:	f7ff fb77 	bl	80024a0 <__retarget_lock_release_recursive>
 8002db2:	e7dd      	b.n	8002d70 <_fflush_r+0xc>

08002db4 <memmove>:
 8002db4:	4288      	cmp	r0, r1
 8002db6:	b510      	push	{r4, lr}
 8002db8:	eb01 0402 	add.w	r4, r1, r2
 8002dbc:	d902      	bls.n	8002dc4 <memmove+0x10>
 8002dbe:	4284      	cmp	r4, r0
 8002dc0:	4623      	mov	r3, r4
 8002dc2:	d807      	bhi.n	8002dd4 <memmove+0x20>
 8002dc4:	1e43      	subs	r3, r0, #1
 8002dc6:	42a1      	cmp	r1, r4
 8002dc8:	d008      	beq.n	8002ddc <memmove+0x28>
 8002dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002dd2:	e7f8      	b.n	8002dc6 <memmove+0x12>
 8002dd4:	4402      	add	r2, r0
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	428a      	cmp	r2, r1
 8002dda:	d100      	bne.n	8002dde <memmove+0x2a>
 8002ddc:	bd10      	pop	{r4, pc}
 8002dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002de6:	e7f7      	b.n	8002dd8 <memmove+0x24>

08002de8 <_sbrk_r>:
 8002de8:	b538      	push	{r3, r4, r5, lr}
 8002dea:	4d06      	ldr	r5, [pc, #24]	@ (8002e04 <_sbrk_r+0x1c>)
 8002dec:	2300      	movs	r3, #0
 8002dee:	4604      	mov	r4, r0
 8002df0:	4608      	mov	r0, r1
 8002df2:	602b      	str	r3, [r5, #0]
 8002df4:	f7fe f98e 	bl	8001114 <_sbrk>
 8002df8:	1c43      	adds	r3, r0, #1
 8002dfa:	d102      	bne.n	8002e02 <_sbrk_r+0x1a>
 8002dfc:	682b      	ldr	r3, [r5, #0]
 8002dfe:	b103      	cbz	r3, 8002e02 <_sbrk_r+0x1a>
 8002e00:	6023      	str	r3, [r4, #0]
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
 8002e04:	2000022c 	.word	0x2000022c

08002e08 <memcpy>:
 8002e08:	440a      	add	r2, r1
 8002e0a:	4291      	cmp	r1, r2
 8002e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e10:	d100      	bne.n	8002e14 <memcpy+0xc>
 8002e12:	4770      	bx	lr
 8002e14:	b510      	push	{r4, lr}
 8002e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e1e:	4291      	cmp	r1, r2
 8002e20:	d1f9      	bne.n	8002e16 <memcpy+0xe>
 8002e22:	bd10      	pop	{r4, pc}

08002e24 <_realloc_r>:
 8002e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e28:	4607      	mov	r7, r0
 8002e2a:	4614      	mov	r4, r2
 8002e2c:	460d      	mov	r5, r1
 8002e2e:	b921      	cbnz	r1, 8002e3a <_realloc_r+0x16>
 8002e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e34:	4611      	mov	r1, r2
 8002e36:	f7ff bba1 	b.w	800257c <_malloc_r>
 8002e3a:	b92a      	cbnz	r2, 8002e48 <_realloc_r+0x24>
 8002e3c:	f7ff fb32 	bl	80024a4 <_free_r>
 8002e40:	4625      	mov	r5, r4
 8002e42:	4628      	mov	r0, r5
 8002e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e48:	f000 f81a 	bl	8002e80 <_malloc_usable_size_r>
 8002e4c:	4284      	cmp	r4, r0
 8002e4e:	4606      	mov	r6, r0
 8002e50:	d802      	bhi.n	8002e58 <_realloc_r+0x34>
 8002e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e56:	d8f4      	bhi.n	8002e42 <_realloc_r+0x1e>
 8002e58:	4621      	mov	r1, r4
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	f7ff fb8e 	bl	800257c <_malloc_r>
 8002e60:	4680      	mov	r8, r0
 8002e62:	b908      	cbnz	r0, 8002e68 <_realloc_r+0x44>
 8002e64:	4645      	mov	r5, r8
 8002e66:	e7ec      	b.n	8002e42 <_realloc_r+0x1e>
 8002e68:	42b4      	cmp	r4, r6
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	bf28      	it	cs
 8002e70:	4632      	movcs	r2, r6
 8002e72:	f7ff ffc9 	bl	8002e08 <memcpy>
 8002e76:	4629      	mov	r1, r5
 8002e78:	4638      	mov	r0, r7
 8002e7a:	f7ff fb13 	bl	80024a4 <_free_r>
 8002e7e:	e7f1      	b.n	8002e64 <_realloc_r+0x40>

08002e80 <_malloc_usable_size_r>:
 8002e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e84:	1f18      	subs	r0, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bfbc      	itt	lt
 8002e8a:	580b      	ldrlt	r3, [r1, r0]
 8002e8c:	18c0      	addlt	r0, r0, r3
 8002e8e:	4770      	bx	lr

08002e90 <findslot>:
 8002e90:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <findslot+0x2c>)
 8002e92:	b510      	push	{r4, lr}
 8002e94:	4604      	mov	r4, r0
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	b118      	cbz	r0, 8002ea2 <findslot+0x12>
 8002e9a:	6a03      	ldr	r3, [r0, #32]
 8002e9c:	b90b      	cbnz	r3, 8002ea2 <findslot+0x12>
 8002e9e:	f7ff f9e9 	bl	8002274 <__sinit>
 8002ea2:	2c13      	cmp	r4, #19
 8002ea4:	d807      	bhi.n	8002eb6 <findslot+0x26>
 8002ea6:	4806      	ldr	r0, [pc, #24]	@ (8002ec0 <findslot+0x30>)
 8002ea8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002eac:	3201      	adds	r2, #1
 8002eae:	d002      	beq.n	8002eb6 <findslot+0x26>
 8002eb0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002eb4:	bd10      	pop	{r4, pc}
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	e7fc      	b.n	8002eb4 <findslot+0x24>
 8002eba:	bf00      	nop
 8002ebc:	2000001c 	.word	0x2000001c
 8002ec0:	20000248 	.word	0x20000248

08002ec4 <error>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	f7ff fabe 	bl	8002448 <__errno>
 8002ecc:	2613      	movs	r6, #19
 8002ece:	4605      	mov	r5, r0
 8002ed0:	2700      	movs	r7, #0
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	4639      	mov	r1, r7
 8002ed6:	beab      	bkpt	0x00ab
 8002ed8:	4606      	mov	r6, r0
 8002eda:	602e      	str	r6, [r5, #0]
 8002edc:	4620      	mov	r0, r4
 8002ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ee0 <checkerror>:
 8002ee0:	1c43      	adds	r3, r0, #1
 8002ee2:	d101      	bne.n	8002ee8 <checkerror+0x8>
 8002ee4:	f7ff bfee 	b.w	8002ec4 <error>
 8002ee8:	4770      	bx	lr

08002eea <_swiread>:
 8002eea:	b530      	push	{r4, r5, lr}
 8002eec:	b085      	sub	sp, #20
 8002eee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002ef2:	9203      	str	r2, [sp, #12]
 8002ef4:	2406      	movs	r4, #6
 8002ef6:	ad01      	add	r5, sp, #4
 8002ef8:	4620      	mov	r0, r4
 8002efa:	4629      	mov	r1, r5
 8002efc:	beab      	bkpt	0x00ab
 8002efe:	4604      	mov	r4, r0
 8002f00:	4620      	mov	r0, r4
 8002f02:	f7ff ffed 	bl	8002ee0 <checkerror>
 8002f06:	b005      	add	sp, #20
 8002f08:	bd30      	pop	{r4, r5, pc}

08002f0a <_read>:
 8002f0a:	b570      	push	{r4, r5, r6, lr}
 8002f0c:	460e      	mov	r6, r1
 8002f0e:	4614      	mov	r4, r2
 8002f10:	f7ff ffbe 	bl	8002e90 <findslot>
 8002f14:	4605      	mov	r5, r0
 8002f16:	b930      	cbnz	r0, 8002f26 <_read+0x1c>
 8002f18:	f7ff fa96 	bl	8002448 <__errno>
 8002f1c:	2309      	movs	r3, #9
 8002f1e:	6003      	str	r3, [r0, #0]
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
 8002f26:	6800      	ldr	r0, [r0, #0]
 8002f28:	4622      	mov	r2, r4
 8002f2a:	4631      	mov	r1, r6
 8002f2c:	f7ff ffdd 	bl	8002eea <_swiread>
 8002f30:	1c43      	adds	r3, r0, #1
 8002f32:	d0f5      	beq.n	8002f20 <_read+0x16>
 8002f34:	686b      	ldr	r3, [r5, #4]
 8002f36:	1a20      	subs	r0, r4, r0
 8002f38:	4403      	add	r3, r0
 8002f3a:	606b      	str	r3, [r5, #4]
 8002f3c:	e7f2      	b.n	8002f24 <_read+0x1a>

08002f3e <_swilseek>:
 8002f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f40:	460c      	mov	r4, r1
 8002f42:	4616      	mov	r6, r2
 8002f44:	f7ff ffa4 	bl	8002e90 <findslot>
 8002f48:	4605      	mov	r5, r0
 8002f4a:	b940      	cbnz	r0, 8002f5e <_swilseek+0x20>
 8002f4c:	f7ff fa7c 	bl	8002448 <__errno>
 8002f50:	2309      	movs	r3, #9
 8002f52:	6003      	str	r3, [r0, #0]
 8002f54:	f04f 34ff 	mov.w	r4, #4294967295
 8002f58:	4620      	mov	r0, r4
 8002f5a:	b003      	add	sp, #12
 8002f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f5e:	2e02      	cmp	r6, #2
 8002f60:	d903      	bls.n	8002f6a <_swilseek+0x2c>
 8002f62:	f7ff fa71 	bl	8002448 <__errno>
 8002f66:	2316      	movs	r3, #22
 8002f68:	e7f3      	b.n	8002f52 <_swilseek+0x14>
 8002f6a:	2e01      	cmp	r6, #1
 8002f6c:	d112      	bne.n	8002f94 <_swilseek+0x56>
 8002f6e:	6843      	ldr	r3, [r0, #4]
 8002f70:	18e4      	adds	r4, r4, r3
 8002f72:	d4f6      	bmi.n	8002f62 <_swilseek+0x24>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	260a      	movs	r6, #10
 8002f78:	e9cd 3400 	strd	r3, r4, [sp]
 8002f7c:	466f      	mov	r7, sp
 8002f7e:	4630      	mov	r0, r6
 8002f80:	4639      	mov	r1, r7
 8002f82:	beab      	bkpt	0x00ab
 8002f84:	4606      	mov	r6, r0
 8002f86:	4630      	mov	r0, r6
 8002f88:	f7ff ffaa 	bl	8002ee0 <checkerror>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	dbe1      	blt.n	8002f54 <_swilseek+0x16>
 8002f90:	606c      	str	r4, [r5, #4]
 8002f92:	e7e1      	b.n	8002f58 <_swilseek+0x1a>
 8002f94:	2e02      	cmp	r6, #2
 8002f96:	6803      	ldr	r3, [r0, #0]
 8002f98:	d1ec      	bne.n	8002f74 <_swilseek+0x36>
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	260c      	movs	r6, #12
 8002f9e:	466f      	mov	r7, sp
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	4639      	mov	r1, r7
 8002fa4:	beab      	bkpt	0x00ab
 8002fa6:	4606      	mov	r6, r0
 8002fa8:	4630      	mov	r0, r6
 8002faa:	f7ff ff99 	bl	8002ee0 <checkerror>
 8002fae:	1c43      	adds	r3, r0, #1
 8002fb0:	d0d0      	beq.n	8002f54 <_swilseek+0x16>
 8002fb2:	4404      	add	r4, r0
 8002fb4:	e7de      	b.n	8002f74 <_swilseek+0x36>

08002fb6 <_lseek>:
 8002fb6:	f7ff bfc2 	b.w	8002f3e <_swilseek>

08002fba <_swiwrite>:
 8002fba:	b530      	push	{r4, r5, lr}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002fc2:	9203      	str	r2, [sp, #12]
 8002fc4:	2405      	movs	r4, #5
 8002fc6:	ad01      	add	r5, sp, #4
 8002fc8:	4620      	mov	r0, r4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	beab      	bkpt	0x00ab
 8002fce:	4604      	mov	r4, r0
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7ff ff85 	bl	8002ee0 <checkerror>
 8002fd6:	b005      	add	sp, #20
 8002fd8:	bd30      	pop	{r4, r5, pc}

08002fda <_write>:
 8002fda:	b570      	push	{r4, r5, r6, lr}
 8002fdc:	460e      	mov	r6, r1
 8002fde:	4615      	mov	r5, r2
 8002fe0:	f7ff ff56 	bl	8002e90 <findslot>
 8002fe4:	4604      	mov	r4, r0
 8002fe6:	b930      	cbnz	r0, 8002ff6 <_write+0x1c>
 8002fe8:	f7ff fa2e 	bl	8002448 <__errno>
 8002fec:	2309      	movs	r3, #9
 8002fee:	6003      	str	r3, [r0, #0]
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	6800      	ldr	r0, [r0, #0]
 8002ff8:	462a      	mov	r2, r5
 8002ffa:	4631      	mov	r1, r6
 8002ffc:	f7ff ffdd 	bl	8002fba <_swiwrite>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	dbf5      	blt.n	8002ff0 <_write+0x16>
 8003004:	6862      	ldr	r2, [r4, #4]
 8003006:	1ae8      	subs	r0, r5, r3
 8003008:	4402      	add	r2, r0
 800300a:	42ab      	cmp	r3, r5
 800300c:	6062      	str	r2, [r4, #4]
 800300e:	d1f1      	bne.n	8002ff4 <_write+0x1a>
 8003010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003014:	2000      	movs	r0, #0
 8003016:	f7ff bf55 	b.w	8002ec4 <error>

0800301a <_swiclose>:
 800301a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800301c:	2402      	movs	r4, #2
 800301e:	9001      	str	r0, [sp, #4]
 8003020:	ad01      	add	r5, sp, #4
 8003022:	4620      	mov	r0, r4
 8003024:	4629      	mov	r1, r5
 8003026:	beab      	bkpt	0x00ab
 8003028:	4604      	mov	r4, r0
 800302a:	4620      	mov	r0, r4
 800302c:	f7ff ff58 	bl	8002ee0 <checkerror>
 8003030:	b003      	add	sp, #12
 8003032:	bd30      	pop	{r4, r5, pc}

08003034 <_close>:
 8003034:	b538      	push	{r3, r4, r5, lr}
 8003036:	4605      	mov	r5, r0
 8003038:	f7ff ff2a 	bl	8002e90 <findslot>
 800303c:	4604      	mov	r4, r0
 800303e:	b930      	cbnz	r0, 800304e <_close+0x1a>
 8003040:	f7ff fa02 	bl	8002448 <__errno>
 8003044:	2309      	movs	r3, #9
 8003046:	6003      	str	r3, [r0, #0]
 8003048:	f04f 30ff 	mov.w	r0, #4294967295
 800304c:	bd38      	pop	{r3, r4, r5, pc}
 800304e:	3d01      	subs	r5, #1
 8003050:	2d01      	cmp	r5, #1
 8003052:	d809      	bhi.n	8003068 <_close+0x34>
 8003054:	4b09      	ldr	r3, [pc, #36]	@ (800307c <_close+0x48>)
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	429a      	cmp	r2, r3
 800305c:	d104      	bne.n	8003068 <_close+0x34>
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	6003      	str	r3, [r0, #0]
 8003064:	2000      	movs	r0, #0
 8003066:	e7f1      	b.n	800304c <_close+0x18>
 8003068:	6820      	ldr	r0, [r4, #0]
 800306a:	f7ff ffd6 	bl	800301a <_swiclose>
 800306e:	2800      	cmp	r0, #0
 8003070:	d1ec      	bne.n	800304c <_close+0x18>
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	6023      	str	r3, [r4, #0]
 8003078:	e7e8      	b.n	800304c <_close+0x18>
 800307a:	bf00      	nop
 800307c:	20000248 	.word	0x20000248

08003080 <_swistat>:
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	460c      	mov	r4, r1
 8003084:	f7ff ff04 	bl	8002e90 <findslot>
 8003088:	4605      	mov	r5, r0
 800308a:	b930      	cbnz	r0, 800309a <_swistat+0x1a>
 800308c:	f7ff f9dc 	bl	8002448 <__errno>
 8003090:	2309      	movs	r3, #9
 8003092:	6003      	str	r3, [r0, #0]
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	bd70      	pop	{r4, r5, r6, pc}
 800309a:	6863      	ldr	r3, [r4, #4]
 800309c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030a0:	6063      	str	r3, [r4, #4]
 80030a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030a6:	64a3      	str	r3, [r4, #72]	@ 0x48
 80030a8:	260c      	movs	r6, #12
 80030aa:	4630      	mov	r0, r6
 80030ac:	4629      	mov	r1, r5
 80030ae:	beab      	bkpt	0x00ab
 80030b0:	4605      	mov	r5, r0
 80030b2:	4628      	mov	r0, r5
 80030b4:	f7ff ff14 	bl	8002ee0 <checkerror>
 80030b8:	1c43      	adds	r3, r0, #1
 80030ba:	d0eb      	beq.n	8003094 <_swistat+0x14>
 80030bc:	6120      	str	r0, [r4, #16]
 80030be:	2000      	movs	r0, #0
 80030c0:	e7ea      	b.n	8003098 <_swistat+0x18>

080030c2 <_stat>:
 80030c2:	b538      	push	{r3, r4, r5, lr}
 80030c4:	460d      	mov	r5, r1
 80030c6:	4604      	mov	r4, r0
 80030c8:	2258      	movs	r2, #88	@ 0x58
 80030ca:	2100      	movs	r1, #0
 80030cc:	4628      	mov	r0, r5
 80030ce:	f7ff f96c 	bl	80023aa <memset>
 80030d2:	4620      	mov	r0, r4
 80030d4:	2100      	movs	r1, #0
 80030d6:	f000 f811 	bl	80030fc <_swiopen>
 80030da:	1c43      	adds	r3, r0, #1
 80030dc:	4604      	mov	r4, r0
 80030de:	d00b      	beq.n	80030f8 <_stat+0x36>
 80030e0:	686b      	ldr	r3, [r5, #4]
 80030e2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80030e6:	606b      	str	r3, [r5, #4]
 80030e8:	4629      	mov	r1, r5
 80030ea:	f7ff ffc9 	bl	8003080 <_swistat>
 80030ee:	4605      	mov	r5, r0
 80030f0:	4620      	mov	r0, r4
 80030f2:	f7ff ff9f 	bl	8003034 <_close>
 80030f6:	462c      	mov	r4, r5
 80030f8:	4620      	mov	r0, r4
 80030fa:	bd38      	pop	{r3, r4, r5, pc}

080030fc <_swiopen>:
 80030fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003100:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 80031ac <_swiopen+0xb0>
 8003104:	b096      	sub	sp, #88	@ 0x58
 8003106:	4607      	mov	r7, r0
 8003108:	460e      	mov	r6, r1
 800310a:	2400      	movs	r4, #0
 800310c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8003110:	3301      	adds	r3, #1
 8003112:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8003116:	d032      	beq.n	800317e <_swiopen+0x82>
 8003118:	3401      	adds	r4, #1
 800311a:	2c14      	cmp	r4, #20
 800311c:	d1f6      	bne.n	800310c <_swiopen+0x10>
 800311e:	f7ff f993 	bl	8002448 <__errno>
 8003122:	2318      	movs	r3, #24
 8003124:	e03a      	b.n	800319c <_swiopen+0xa0>
 8003126:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800312a:	f240 6301 	movw	r3, #1537	@ 0x601
 800312e:	07b2      	lsls	r2, r6, #30
 8003130:	bf48      	it	mi
 8003132:	f045 0502 	orrmi.w	r5, r5, #2
 8003136:	421e      	tst	r6, r3
 8003138:	bf18      	it	ne
 800313a:	f045 0504 	orrne.w	r5, r5, #4
 800313e:	0733      	lsls	r3, r6, #28
 8003140:	bf48      	it	mi
 8003142:	f025 0504 	bicmi.w	r5, r5, #4
 8003146:	4638      	mov	r0, r7
 8003148:	bf48      	it	mi
 800314a:	f045 0508 	orrmi.w	r5, r5, #8
 800314e:	9700      	str	r7, [sp, #0]
 8003150:	f7fd f88e 	bl	8000270 <strlen>
 8003154:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003158:	2501      	movs	r5, #1
 800315a:	4628      	mov	r0, r5
 800315c:	4651      	mov	r1, sl
 800315e:	beab      	bkpt	0x00ab
 8003160:	4605      	mov	r5, r0
 8003162:	2d00      	cmp	r5, #0
 8003164:	db06      	blt.n	8003174 <_swiopen+0x78>
 8003166:	44c8      	add	r8, r9
 8003168:	2300      	movs	r3, #0
 800316a:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 800316e:	f8c8 3004 	str.w	r3, [r8, #4]
 8003172:	e016      	b.n	80031a2 <_swiopen+0xa6>
 8003174:	4628      	mov	r0, r5
 8003176:	f7ff fea5 	bl	8002ec4 <error>
 800317a:	4604      	mov	r4, r0
 800317c:	e011      	b.n	80031a2 <_swiopen+0xa6>
 800317e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8003182:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003186:	46ea      	mov	sl, sp
 8003188:	d1cd      	bne.n	8003126 <_swiopen+0x2a>
 800318a:	4651      	mov	r1, sl
 800318c:	4638      	mov	r0, r7
 800318e:	f7ff ff98 	bl	80030c2 <_stat>
 8003192:	3001      	adds	r0, #1
 8003194:	d0c7      	beq.n	8003126 <_swiopen+0x2a>
 8003196:	f7ff f957 	bl	8002448 <__errno>
 800319a:	2311      	movs	r3, #17
 800319c:	6003      	str	r3, [r0, #0]
 800319e:	f04f 34ff 	mov.w	r4, #4294967295
 80031a2:	4620      	mov	r0, r4
 80031a4:	b016      	add	sp, #88	@ 0x58
 80031a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031aa:	bf00      	nop
 80031ac:	20000248 	.word	0x20000248

080031b0 <_get_semihosting_exts>:
 80031b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80031b4:	4606      	mov	r6, r0
 80031b6:	460f      	mov	r7, r1
 80031b8:	4829      	ldr	r0, [pc, #164]	@ (8003260 <_get_semihosting_exts+0xb0>)
 80031ba:	2100      	movs	r1, #0
 80031bc:	4615      	mov	r5, r2
 80031be:	f7ff ff9d 	bl	80030fc <_swiopen>
 80031c2:	462a      	mov	r2, r5
 80031c4:	4604      	mov	r4, r0
 80031c6:	2100      	movs	r1, #0
 80031c8:	4630      	mov	r0, r6
 80031ca:	f7ff f8ee 	bl	80023aa <memset>
 80031ce:	1c63      	adds	r3, r4, #1
 80031d0:	d014      	beq.n	80031fc <_get_semihosting_exts+0x4c>
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7ff fe5c 	bl	8002e90 <findslot>
 80031d8:	f04f 080c 	mov.w	r8, #12
 80031dc:	4681      	mov	r9, r0
 80031de:	4640      	mov	r0, r8
 80031e0:	4649      	mov	r1, r9
 80031e2:	beab      	bkpt	0x00ab
 80031e4:	4680      	mov	r8, r0
 80031e6:	4640      	mov	r0, r8
 80031e8:	f7ff fe7a 	bl	8002ee0 <checkerror>
 80031ec:	2803      	cmp	r0, #3
 80031ee:	dd02      	ble.n	80031f6 <_get_semihosting_exts+0x46>
 80031f0:	1ec3      	subs	r3, r0, #3
 80031f2:	42ab      	cmp	r3, r5
 80031f4:	dc07      	bgt.n	8003206 <_get_semihosting_exts+0x56>
 80031f6:	4620      	mov	r0, r4
 80031f8:	f7ff ff1c 	bl	8003034 <_close>
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	b003      	add	sp, #12
 8003202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003206:	2204      	movs	r2, #4
 8003208:	eb0d 0102 	add.w	r1, sp, r2
 800320c:	4620      	mov	r0, r4
 800320e:	f7ff fe7c 	bl	8002f0a <_read>
 8003212:	2803      	cmp	r0, #3
 8003214:	ddef      	ble.n	80031f6 <_get_semihosting_exts+0x46>
 8003216:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800321a:	2b53      	cmp	r3, #83	@ 0x53
 800321c:	d1eb      	bne.n	80031f6 <_get_semihosting_exts+0x46>
 800321e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003222:	2b48      	cmp	r3, #72	@ 0x48
 8003224:	d1e7      	bne.n	80031f6 <_get_semihosting_exts+0x46>
 8003226:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800322a:	2b46      	cmp	r3, #70	@ 0x46
 800322c:	d1e3      	bne.n	80031f6 <_get_semihosting_exts+0x46>
 800322e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003232:	2b42      	cmp	r3, #66	@ 0x42
 8003234:	d1df      	bne.n	80031f6 <_get_semihosting_exts+0x46>
 8003236:	2201      	movs	r2, #1
 8003238:	4639      	mov	r1, r7
 800323a:	4620      	mov	r0, r4
 800323c:	f7ff fe7f 	bl	8002f3e <_swilseek>
 8003240:	2800      	cmp	r0, #0
 8003242:	dbd8      	blt.n	80031f6 <_get_semihosting_exts+0x46>
 8003244:	462a      	mov	r2, r5
 8003246:	4631      	mov	r1, r6
 8003248:	4620      	mov	r0, r4
 800324a:	f7ff fe5e 	bl	8002f0a <_read>
 800324e:	4605      	mov	r5, r0
 8003250:	4620      	mov	r0, r4
 8003252:	f7ff feef 	bl	8003034 <_close>
 8003256:	4628      	mov	r0, r5
 8003258:	f7ff fe42 	bl	8002ee0 <checkerror>
 800325c:	e7d0      	b.n	8003200 <_get_semihosting_exts+0x50>
 800325e:	bf00      	nop
 8003260:	0800341b 	.word	0x0800341b

08003264 <initialise_semihosting_exts>:
 8003264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003266:	4d0a      	ldr	r5, [pc, #40]	@ (8003290 <initialise_semihosting_exts+0x2c>)
 8003268:	4c0a      	ldr	r4, [pc, #40]	@ (8003294 <initialise_semihosting_exts+0x30>)
 800326a:	2100      	movs	r1, #0
 800326c:	2201      	movs	r2, #1
 800326e:	a801      	add	r0, sp, #4
 8003270:	6029      	str	r1, [r5, #0]
 8003272:	6022      	str	r2, [r4, #0]
 8003274:	f7ff ff9c 	bl	80031b0 <_get_semihosting_exts>
 8003278:	2800      	cmp	r0, #0
 800327a:	dd07      	ble.n	800328c <initialise_semihosting_exts+0x28>
 800327c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003280:	f003 0201 	and.w	r2, r3, #1
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	602a      	str	r2, [r5, #0]
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	b003      	add	sp, #12
 800328e:	bd30      	pop	{r4, r5, pc}
 8003290:	20000070 	.word	0x20000070
 8003294:	2000006c 	.word	0x2000006c

08003298 <_has_ext_stdout_stderr>:
 8003298:	b510      	push	{r4, lr}
 800329a:	4c04      	ldr	r4, [pc, #16]	@ (80032ac <_has_ext_stdout_stderr+0x14>)
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	da01      	bge.n	80032a6 <_has_ext_stdout_stderr+0xe>
 80032a2:	f7ff ffdf 	bl	8003264 <initialise_semihosting_exts>
 80032a6:	6820      	ldr	r0, [r4, #0]
 80032a8:	bd10      	pop	{r4, pc}
 80032aa:	bf00      	nop
 80032ac:	2000006c 	.word	0x2000006c

080032b0 <initialise_monitor_handles>:
 80032b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b4:	b085      	sub	sp, #20
 80032b6:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8003368 <initialise_monitor_handles+0xb8>
 80032ba:	f8cd 9004 	str.w	r9, [sp, #4]
 80032be:	2303      	movs	r3, #3
 80032c0:	2400      	movs	r4, #0
 80032c2:	9303      	str	r3, [sp, #12]
 80032c4:	af01      	add	r7, sp, #4
 80032c6:	9402      	str	r4, [sp, #8]
 80032c8:	2501      	movs	r5, #1
 80032ca:	4628      	mov	r0, r5
 80032cc:	4639      	mov	r1, r7
 80032ce:	beab      	bkpt	0x00ab
 80032d0:	4605      	mov	r5, r0
 80032d2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800336c <initialise_monitor_handles+0xbc>
 80032d6:	4623      	mov	r3, r4
 80032d8:	4c20      	ldr	r4, [pc, #128]	@ (800335c <initialise_monitor_handles+0xac>)
 80032da:	f8c8 5000 	str.w	r5, [r8]
 80032de:	f04f 32ff 	mov.w	r2, #4294967295
 80032e2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80032e6:	3301      	adds	r3, #1
 80032e8:	2b14      	cmp	r3, #20
 80032ea:	d1fa      	bne.n	80032e2 <initialise_monitor_handles+0x32>
 80032ec:	f7ff ffd4 	bl	8003298 <_has_ext_stdout_stderr>
 80032f0:	4d1b      	ldr	r5, [pc, #108]	@ (8003360 <initialise_monitor_handles+0xb0>)
 80032f2:	b1d0      	cbz	r0, 800332a <initialise_monitor_handles+0x7a>
 80032f4:	f04f 0a03 	mov.w	sl, #3
 80032f8:	2304      	movs	r3, #4
 80032fa:	f8cd 9004 	str.w	r9, [sp, #4]
 80032fe:	2601      	movs	r6, #1
 8003300:	f8cd a00c 	str.w	sl, [sp, #12]
 8003304:	9302      	str	r3, [sp, #8]
 8003306:	4630      	mov	r0, r6
 8003308:	4639      	mov	r1, r7
 800330a:	beab      	bkpt	0x00ab
 800330c:	4683      	mov	fp, r0
 800330e:	4b15      	ldr	r3, [pc, #84]	@ (8003364 <initialise_monitor_handles+0xb4>)
 8003310:	f8cd 9004 	str.w	r9, [sp, #4]
 8003314:	f8c3 b000 	str.w	fp, [r3]
 8003318:	2308      	movs	r3, #8
 800331a:	f8cd a00c 	str.w	sl, [sp, #12]
 800331e:	9302      	str	r3, [sp, #8]
 8003320:	4630      	mov	r0, r6
 8003322:	4639      	mov	r1, r7
 8003324:	beab      	bkpt	0x00ab
 8003326:	4606      	mov	r6, r0
 8003328:	602e      	str	r6, [r5, #0]
 800332a:	682b      	ldr	r3, [r5, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	bf02      	ittt	eq
 8003330:	4b0c      	ldreq	r3, [pc, #48]	@ (8003364 <initialise_monitor_handles+0xb4>)
 8003332:	681b      	ldreq	r3, [r3, #0]
 8003334:	602b      	streq	r3, [r5, #0]
 8003336:	2600      	movs	r6, #0
 8003338:	f8d8 3000 	ldr.w	r3, [r8]
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	6066      	str	r6, [r4, #4]
 8003340:	f7ff ffaa 	bl	8003298 <_has_ext_stdout_stderr>
 8003344:	b130      	cbz	r0, 8003354 <initialise_monitor_handles+0xa4>
 8003346:	4b07      	ldr	r3, [pc, #28]	@ (8003364 <initialise_monitor_handles+0xb4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003354:	b005      	add	sp, #20
 8003356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800335a:	bf00      	nop
 800335c:	20000248 	.word	0x20000248
 8003360:	2000023c 	.word	0x2000023c
 8003364:	20000240 	.word	0x20000240
 8003368:	08003431 	.word	0x08003431
 800336c:	20000244 	.word	0x20000244

08003370 <_init>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr

0800337c <_fini>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr
